{"meta":{"title":"Jinwoo`s Blog","subtitle":"개인 블로그","description":"웹 관련 지식 공유","author":"ParkJinWoo","url":"http://jinwoopark94.github.io"},"pages":[{"title":"404 Not Found：페이지를 찾지 못하였습니다.","date":"2018-02-11T12:46:00.088Z","updated":"2018-02-11T12:46:00.088Z","comments":false,"path":"/404.html","permalink":"http://jinwoopark94.github.io//404.html","excerpt":"","text":""},{"title":"About","date":"2018-02-11T13:09:20.978Z","updated":"2018-02-11T13:09:20.978Z","comments":false,"path":"about/index.html","permalink":"http://jinwoopark94.github.io/about/index.html","excerpt":"","text":"안녕하세요"},{"title":"Categories","date":"2018-02-11T13:14:15.988Z","updated":"2018-02-11T13:14:15.987Z","comments":false,"path":"categories/index.html","permalink":"http://jinwoopark94.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-02-11T11:19:58.584Z","updated":"2018-02-11T11:19:58.584Z","comments":false,"path":"repository/index.html","permalink":"http://jinwoopark94.github.io/repository/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-02-11T13:14:05.533Z","updated":"2018-02-11T13:14:05.533Z","comments":false,"path":"tags/index.html","permalink":"http://jinwoopark94.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Javascript - Hoisting","slug":"javascript-hoisting","date":"2018-02-14T09:39:04.000Z","updated":"2018-02-14T09:40:18.892Z","comments":true,"path":"2018/02/14/javascript-hoisting/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/14/javascript-hoisting/","excerpt":"","text":"Javascript Hoisting 시작하기 전 Hoisting 이란? hoisting은 hoist라는 단어에서 시작되었으며 hoist의 단어의 의미는 “끌어 올리다”, &quot;끌어 올리는 장치&quot;라는 뜻으로 여기서 &quot;끌어 올린다&quot;라는 것이 포인트 본문 Javascript 실행시 실행 컨텍스트(Execution Context)가 생성되며 Runtime 시점 전 모든(변수, 함수)선언문을 다른 구문보다 먼저 읽어 최상위 Scope에 위치시키는 현상을 Hoisting 이라고 함 중요!! 변수 및 함수 선언이 물리적으로 작성한 코드의 상단으로 옮겨지는 것은 아님 Hoisting은 총 세 가지 단계를 거쳐서 실행됨 선언 단계 초기화 단계 할당 단계 1. 선언 단계 모든(변수, 함수)선언문을 찾으면 변수 객체(Variable Object)에 변수를 등록하며 스코프가 참조하는 대상이됨 2. 초기화 단계 모든 변수 객체(Variable Objecct)에 메모리를 할당함과 동시에 모든 변수에 undefined로 초기화 3. 할당 단계 undefined로 초기화된 변수에 실제값을 할당 변수 호이스팅(Valiable Hoisting) var 키워드로 선언된 변수는 위의 단계에서 선언 단계와 초기화 단계가 한번에 이루어짐 아래 예시로 살펴보자. 12345console.log(score); // undefinedvar score = 1;console.log(score); // 1 위의 코드를 보면 score는 선언되지도 않았는데 undefined라는 값이 들어가 있는데 이 현상은 변수 호이스팅으로 인한 현상 함수 호이스팅(Function Hoisting) 모든 함수는 위의 단계에서 선언 단계, 초기화 단계, 할당 단계가 한번에 이루어짐 아래 예시로 살펴보자. 12345console.log(printHello()); // Hellofunction printHello() &#123; console.log(\"Hello\");&#125; 위의 코드를 보면 console.log(printHello());는 선언 이전에 Hello 라는 결과 값을 출력하는데 이러한 현상은 함수 호이스팅으로 인한 현상","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Hoisting","slug":"Hoisting","permalink":"http://jinwoopark94.github.io/tags/Hoisting/"}]},{"title":"Javascript - Var keyword problem","slug":"javascript-var-keyword-problem","date":"2018-02-14T09:34:26.000Z","updated":"2018-02-14T09:36:27.484Z","comments":true,"path":"2018/02/14/javascript-var-keyword-problem/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/14/javascript-var-keyword-problem/","excerpt":"","text":"Javascript var 키워드의 문제점 1. 중복 선언 변수에서 기본자료형은 중복 선언이 가능 1234567var score = 1;console.log(score); // 1var score = 100;console.log(score); // 100 2. var 키워드 생략 변수 선언시 var 키워드를 생략이 가능하며 var 키워드 생략시 변수는 전역 변수가 됨 123score = 1;console.log(score); // 1 3. 동적 타이핑 하나의 변수에 여러 Data type을 대입할 수 있음 12345678var score = 1;console.log(typeof(score)); // type: numberscore = '1';console.log(typeof(score)); // type: stringscore = [];console.log(typeof(score)); // type; object 4. 변수 호이스팅 (Variable Hoisting) 모든 선언문은 호이스팅으로 인해 변수를 선언 이전에도 참조 가능하며 값은 undefined로 출력 12345console.log(score); // undefinedvar score = 1;console.log(score); // 1 자세한 내용은 호이스팅을 참고 5. Function-level scope Javascript는 다른 언어들과 같이 block-level-scope를 가지지 않고, function-level scope를 가지고 있으므로 전역변수의 남발 현상이 일어남 Function-level scope : 함수내의 변수는 함수 내부에서만 유효하며 지역변수라고 부르며 함수 외부에서는 해당 변수를 참조할 수 없음 Block-level scope : 코드 블럭({ }) 내부에 선언된 변수는 코드 블록 내에서만 유효하며 코드 블럭({ }) 외부에서는 참조할 수 없음 1234567891011&#123; var score = 1;&#125;console.log(score); // 1function checkVal()&#123; var chkval = 3;&#125;console.log(chkval); // Error : chkval is not defined","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Var keyword problem","slug":"Var-keyword-problem","permalink":"http://jinwoopark94.github.io/tags/Var-keyword-problem/"}]},{"title":"HTML Tag - Table, Image and Image map","slug":"html-markup3","date":"2018-02-14T06:41:39.000Z","updated":"2018-02-14T06:43:28.762Z","comments":true,"path":"2018/02/14/html-markup3/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/14/html-markup3/","excerpt":"","text":"HTML 태그 정리 Tables (테이블) &lt;table&gt; 1. 정의 데이터를 표의 형태로 나타냄 2. 사용 요소를 레이아웃 목적으로 사용하면 안됨 &lt;table&gt; 속성은 여러가지가 있지만 MDN에서는 태그 안에 속성을 사용하기 보다는 CSS을 이용한 스타일링 하는 것을 추천 3. Display Block &lt;thead&gt; 1. 정의 &lt;table&gt;요소의 Header행을 그룹화 하기 위해 지정 2. 사용 &lt;caption&gt;, &lt;colgroup&gt;, &lt;col&gt; 다음에 기술 보통 &lt;tr&gt; 요소를 포함 3. Display Inline-Block &lt;tbody&gt; 1. 정의 &lt;table&gt;요소의 데이터행을 그룹화하기 위해 지정 2. 사용 &lt;caption&gt;, &lt;colgroup&gt;, &lt;col&gt;, &lt;thead&gt;, &lt;tfoot&gt; 다음에 기술 3. Display Inline-Block &lt;tfoot&gt; 1. 정의 &lt;table&gt;요소의 푸터행을 그룹화하기 위해 지정 2. 사용 보통 &lt;tr&gt;요소를 포함 &lt;caption&gt;, &lt;colgroup&gt;, &lt;col&gt; 다음에 기술 &lt;thead&gt; 요소 다음에 &lt;tbody&gt; 이전에 기술 3. Display Inline-Block &lt;caption&gt; 1. 정의 &lt;table&gt;요소의 제목을 지정 2. 사용 &lt;table&gt;요소의 바로 다음에 기술 테이블의 문맥을 소개하며 쉽게 이해할 수 있도록 함 3. Display Inline-Block &lt;colgroup&gt; 1. 정의 &lt;table&gt;요소에서 하나 이상의 행의 그룹을 나타냄 2. 사용 &lt;table&gt;요소 안에 표의 열을 구조적인 그룹화를 위한 요소 &lt;caption&gt;요소 바로 뒤에 &lt;thead&gt;, &lt;tfoot&gt;, &lt;tbody&gt; 요소 이전에 기술 &lt;col&gt;요소를 포함 3. Display Inline-Block &lt;col&gt; 1. 정의 &lt;colgroup&gt; 요소에서 하나 이상의 행을 나타냄 2. 사용 표의 열에 대해 속성값과 스타일 공유를 위한 요소 &lt;table&gt;요소 안의 &lt;colgroup&gt;요소 안에서 사용 &lt;caption&gt;요소 바로 뒤에 &lt;thead&gt;, &lt;tfoot&gt;, &lt;tbody&gt; 요소 이전에 기술 3. Display Inline-Block &lt;tr&gt; 1. 정의 &lt;table&gt; 요소에서 행을 정의 2. 사용 &lt;tr&gt;, &lt;td&gt; 요소를 포함 3. Display Inline-Block &lt;th&gt; 1. 정의 &lt;table&gt; 요소에서 제목 셀을 정의 2. 사용 &lt;tr&gt; 요소 아래에 사용해야 함 colspan 속성을 통하여 열 병합을 수로 지정 rowspan 속성을 통하여 행 병합을 수로 지정 header 속성을 통하여 대응하는 헤더셀의 id 컨텐트 속성 값을 지정 3. Display Inline-Block &lt;td&gt; 1. 정의 &lt;table&gt; 요소에서 데이터 셀을 정의 2. 사용 &lt;tr&gt; 요소 아래에 사용해야 함 colspan 속성을 통하여 열 병합을 수로 지정 rowspan 속성을 통하여 행 병합을 수로 지정 header 속성을 통하여 대응하는 헤더셀의 id 컨텐트 속성 값을 지정 3. Display Inline-Block Images and Image maps (이미지와 이미지 맵) &lt;img /&gt; 1. 정의 이미지를 삽입을 위함 2. 사용 alt 속성을 통하여 이미지가 url이 잘못되거나 이미지가 표시되지 않는 사용자에게 이미지 대신 텍스트로 표시 src 속성을 통하여 이미지 주소를 나타냄 usemap 속성을 통하여 이미지와 관련된 이미지맵이 있음을 나타냄 3. Display Block &lt;map&gt; 1. 정의 &lt;area&gt; 요소와 함께 사용되며 이미지 맵을 정의 2. 사용 &lt;name&gt; 속성은 필수 속성이며 맵에 이름을 부여하고 참조 할 수 있음 이미지에 하나 이상의 영역을 지정하여 각 영역에 링크 설정 가능 3. Display Block &lt;area&gt; 1. 정의 &lt;map&gt;요소와 함께 사용되며 이미지맵의 영역을 지정 2. 사용 shape 속성을 통해 영역의 형태를 지정 default : 화면 전체 rect : 사각형 circle : 원형 poly : 다각형 coords 속성을 통해 영역의 좌표를 지정 href 속성을 통해 해당 영역 클릭시 이동할 url 지정 alt 속성을 통해 이미지가 url이 잘못되거나 이미지가 표시되지 않는 사용자에게 이미지 대신 텍스트로 표시 3. Display Inline-Block","categories":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/categories/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/tags/HTML/"},{"name":"Markup","slug":"Markup","permalink":"http://jinwoopark94.github.io/tags/Markup/"}]},{"title":"TIL-180213","slug":"TIL-180213","date":"2018-02-13T09:38:45.000Z","updated":"2018-02-13T09:52:09.091Z","comments":true,"path":"2018/02/13/TIL-180213/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/13/TIL-180213/","excerpt":"","text":"오늘 한 일 HTML list, forms markup 정리하기 Algorism 과제 4문제 풀기 Javascript 복습(Javascript Syntax Basics, Data type) 내일 할 일 HTML table, img markup 정리하기 Algorism 풀기 Javascript 복습","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"Javascript - Data Type","slug":"javascript-data-type","date":"2018-02-13T09:26:23.000Z","updated":"2018-02-13T09:47:49.946Z","comments":true,"path":"2018/02/13/javascript-data-type/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/13/javascript-data-type/","excerpt":"","text":"자료형 (Data Type) 자료형에는 기본 자료형과 객체형이 있으며 기본자료형에는 Boolean, null, undefined, Number, String, Symbol이 있으며 객체형에는 Object가 있음 1. 기본 자료형 기본 자료형은 변경 불가능한 값(immutable value)이며 값으로 접근(Pass-by-value)함 정적으로 메모리가 정해져있는 STACK 영역에 메모리 할당 예) 아래의 예시를 그림으로 설명 12345var a = 1; // 1번a = 3; // 2번var b = a; // 3번 1번 1var a = 1; 2번 1a = 3; 3번 1var b = a; 1-1. Boolean Javascript 내에서 가장 많이 쓰이는 데이터 타입이며 true와 false 두 가지 값만 가짐 12var foo = true;var boo = false; 1-2. Undefined Javascript 내에서는 변수를 선언하면 자동적으로 모든 초기값을 undefined가 할당 123var foo; // 값은 undefinedconsole.log(foo === undefined); // true 1-3. Null Null 타입은 값이 하나이고 null은 빈 객체를 가르키므로 변수 정의시 해당 변수가 객체로 사용되어 진다고 하면 null로 초기화 하는 것이 좋음 123var foo = null;console.log(typeof(foo)); // object 여기서 잠깐!! Undefined와 Null의 차이점을 알아보자 1234567null과 undefined는 결국 둘다 값이 없음을 나타내는데 둘의 큰 차이점은 등록, 저장 여부이다.null은 값은 값이지만 값으로서 의미가 없는 특별한 값이 등록되어 있는 것이고, undefined는 등록이 되어있지 않기 때문에 초기화도 정의되지 않는 것이다.결국 null은 선언, 등록을 하는 키워드이고, undefined는 미리 선언된 전역변수이다.참고 : http://webclub.tistory.com/1 1-4. Number 숫자를 표현하는 정수와 실수, 음의 무한대와 양의 무한대를 표현하는 -Infinity와 Infinity, 숫자가 아닌 값을 나타내는 NaN(Not a Number)가 있음 1234567var foo = 1;var boo = 1.3;console.log(typeof(foo)); // numberconsole.log(typeof(-Infinity)); // numberconsole.log(typeof(Infinity)); // numberconsole.log(typeof(NaN)); // number 1-5. String 문자열 타입은 Text 데이터를 나타내는데 사용하며 ' '나 &quot; &quot;로 감싸서 표현함 String의 모든 데이터 타입은 16비트 유니코드 문자의 연속임 1234var foo = \"HARIBO\";var boo = 'Chocochip';var errorFoo = 'Snack\" // error : 따옴표의 짝이 맞지 않음 여기서 잠깐!! Number Type -&gt; String Type으로 변경하는 방법과 String Type -&gt; Number Type으로 변경하는 방법을 알아보자 1. Number Type을 String Type으로 변경하는 방법 12345var val = 1004;val = val + '';// val = val.toString();// val = String(val);console.log(typeof val); // string 첫 번째와 두 번째 방법을 추천 2. String Type을 Number Type으로 변경하는 방법 123456var val = '1004';val = +val; // \"+\": 단항 연산자(unary operator)// val = parseInt(val);// val = val * 1;// val = Number(val);console.log(typeof val); // number 첫 번째와 두 번째 방법을 추천 1-6. Symbol ES6에서 새롭게 추가된 Type이며 주로 객체의 프로퍼티 키로 사용 어플리케이션 전체에서 유일하기 때문에 Symbol 값을 키로 갖는 프로퍼티는 충돌 위험이 없음 12var key = Symbol('key');console.log(typeof key); // symbol 2. 객체형 객체형은 변경 가능한 값(mutable value)이며 참조로 접근(Pass-by-reference)함 동적으로 변하는 HEAP 영역에 메모리 할당 예) 아래의 예시를 그림으로 설명 12345var a = 1; // 1번a = 3; // 2번var b = a; // 3번 1번 1var a = 1; 2번 1a = 3; 3번 1var b = a; 2-1. object 배열, 함수, 정규표현식 등 기본자료형을 제외한 나머지들을 포함 12345678var userInfo = &#123; name : 'Park', number : '13'&#125;;var user = [];var foo = function doSomething()&#123;&#125;; 정리 기본 자료형 객체형 데이터를 변경 불가능 데이터 변경 가능 값으로 전달 (Pass by Value) 참조로 전달 (Pass by reference)","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Closure","slug":"Closure","permalink":"http://jinwoopark94.github.io/tags/Closure/"}]},{"title":"Javascript - Syntax Basics","slug":"javascript-syntax-basics","date":"2018-02-13T07:48:09.000Z","updated":"2018-02-13T07:49:35.277Z","comments":true,"path":"2018/02/13/javascript-syntax-basics/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/13/javascript-syntax-basics/","excerpt":"","text":"Javascript 기본 문법 및 기초 문법 1. 대소문자 구분 Script내에 변수, 함수 이름, 연산자 모두 대소문자 구분함 123// test와 Test는 서로 다른 변수임var test;var Test; 2. 식별자 (identifier) 식별자는 변수나 함수, 프로퍼티, 함수 매개변수의 이름을 가르키며 Javascript에서는 주로 카멜 케이스로 사용함 ECMAScript의 내장 함수가 모두 카멜 케이스로 표기되어 있음 1234// 카멜 케이스 : 첫 번째 문자는 소문자며 단어가 바뀔 때 대문자로 표기var fastCar;var myHouse;var likeHARIBO; 3. 값 (literal) 여기서의 값을 보통 리터널이라 부름 리터널이란 : 변수 또는 상수에 저장되는 값 자체를 의미 12342000 // literal : Number&apos;Hi Hello&apos; // literal : String&#123; name: &apos;Park&apos;, age: &apos;25&apos; &#125; // literal : Object[&apos;Spring&apos;,&apos;Summer&apos;]; // literal : Array 4. 표현식 (Expression) 하나의 값으로 평가될 수 있는 구문 구문은 표현식이 될 수 없음 1210 * 6 // 60&apos;Hi&apos; + &apos; &apos; + &apos;bro&apos; // &apos;Hi bro&apos; 5. 구문 (Statement) Script가 컴퓨터에 의해 단계별로 수행될 명령들 1var x = 5; 예 ) 키워드 x라는 이름으로 변수를 생성하고 그 x라는 이름에 5라는 값을 넣어라 1var z = x + y; 예 ) 키워드 z라는 이름으로 변수를 생성하고 x,y라는 값을 가져와서 더한 다음 z에 넣어라 6. 변수 (Variable) 모든 변수에 다른 언어들과 달리 어떤 타입의 데이터를 저장할 수 있으며, 값을 저장, 참조하기 위해 사용하고 메모리 상의 주소를 기억하는 저장소 메모리 주소에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자 12var number; // 변수의 선언과 초기화number = 6; 예) number로 변수를 선언하고 변수 number에 6을 할당해라 7. 주석 Javascript에서는 주석을 C언어와 같은 스타일로 표기 한 줄 주석은 아래와 같이 슬래시(/)문자 두 개로 나타냄 1// 한 줄 주석 여러 줄 주석은 시작 형태는 (/*) 마지막 형태는 (*/)로 끝냄 123/* 여러 줄 주석*/ 최대한 주석은 사용 안 하는 것이 좋은 코드 8. 문장 8-1. Javascript에서는 각 문장을 세미콜론으로 종료함 Javascript에서 암묵적으로 세미콜론이 있었으리라고 생각되는 부분에 세미콜론을 추가해서 문법 에러는 나지않음 12var snack = 'HARIBO' // 세미콜론은 안붙여도 에러 Xvar stomachFull = false; // 문장의 마지막에는 세미콜론을 븥이는 것을 권장 8-2. 여러 문장을 코드 블록인 중괄호 { }을 사용하여 합칠 수 있음 코드 블록을 사용하면 의도를 더 명확하게 표현 가능하고 수정할 때 에러가 생길 가능성이 적어짐 12345678var foo = 1;var boo = 2;var sum = 0;function sum(foo, boo)&#123; sum = this.foo + this.boo; alert(sum);&#125; 키워드와 예약어 1. 키워드 Javascript에서 키워드는 식별자나 프로퍼티 이름에 사용이 불가능함 break default function return var case delete if switch void catch do in this while const else instanceof throw with continue finally let try typeof debugger for new ECMAScript 5에서는 예약어 규칙이 달라져서 아래 목록은 일반 모드에서 예약어로 사용하는 키워드 class enum extends super const export import 2. 예약어 Javascript에서 예약어는 이미 쓰임이 정해져 있는 키워드를 의미 abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package const goto private transient implements protected volatile double public debugger import throws 참고 사이트 Javascript MDN http://poiemaweb.com","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Syntax Basics","slug":"Syntax-Basics","permalink":"http://jinwoopark94.github.io/tags/Syntax-Basics/"}]},{"title":"HTML Tag - List, Forms markup","slug":"html-markup2","date":"2018-02-13T05:34:48.000Z","updated":"2018-02-13T05:38:00.977Z","comments":true,"path":"2018/02/13/html-markup2/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/13/html-markup2/","excerpt":"","text":"HTML 태그 정리 List Markup (리스트 마크업) 태그 정의 사용 Display &lt;ol&gt; 순서가 있는 목록을 나타냄 - 보통 &lt;li&gt;요소를 포함하고 있고 &lt;li&gt;의 value 속성 값을 통해 목록 아이템의 순번을 지정- reversed, start, type의 속성들이 있음- 브라우저에서 자동으로 아라비아 숫자로 표현 Inline-Block &lt;ul&gt; 순서가 중요하지 않은 목록을 나타냄 - 보통 &lt;li&gt;요소를 포함하고 있음- 브라우저에서 자동으로 블릿으로 표현 Block &lt;li&gt; 목록을 나타냄 - 부모가 &lt;ol&gt;이면 순서가 있는 값을 가지고, 부모가 &lt;ul&gt;이면 순서가 없는 값을 가짐 lnline-Block &lt;dl&gt; 용어, 설명 그룹에서 설명, 정의, 값을 나타냄 - 용어를 정의 하는 &lt;dt&gt;요소와 용어를 설명하는 &lt;dd&gt;요소를 포함 Block &lt;dt&gt; &lt;dl&gt;요소의 용어, 설명 그룹에서 용어나 이름을 나타냄 - &lt;dl&gt;의 하부 요소로 용어를 설명하는 &lt;dd&gt;요소와 함께 사용 Inline-Block &lt;dd&gt; &lt;dl&gt;요소의 용어, 성명 그룹에서 설명, 정의 값을 나타냄 - &lt;dl&gt;의 하부 요소로 정의된 용어 &lt;dt&gt;에 대한 설명과 함께 사용 Inline-Block Forms Markup (폼 마크업) 태그 정의 사용 Display &lt;form&gt; section에 기술된 다른 HTML 요소의 모든 프로퍼티와 메소드 공유 - action속성을 통해 필드 내용을 보낼 URL 지정- method속성을 통해 폼을 post 또는 get 방식으로 처리- name속성을 통해 링크나 스크립트를 통해 이 폼을 참조할 수 있게 식별자 지정 Block &lt;fieldset&gt; 여러개의 콘트롤과 라벨을 그룹화함 - disabled속성을 통해 첫번째 legend요소를 제외한 모든 자식 요소를 비활성화 시킴- form 속성을 통해 다른 폼 소유자와 명시적으로 연관- name속성을 통해 요소의 이름을 지정- legend요소를 이용해 캡션 부여 가능- 중첩하여 사용 가능 Inline-Block &lt;legend&gt; &lt;fieldset&gt;요소를 이용하여 그룹화한 범위의 설명 - 전역 속성만 포함 Inline-Block &lt;label&gt; 사용자 인터페이스에 대한 설명 - label 요소의 범위에 텍스트와 컨트롤을 포함- for 속성을 통하여 폼 컨트롤의 id속성과 같은 값을 지정하여 동기화를 목적으로 함 Inline-Block &lt;input&gt; 폼 안에 기본적인 컨트롤 생성 - type 필수 속성이며 여러가지 타입을 지정 가능type=&quot;text&quot; : 텍스트 입력필드type=&quot;password&quot; : 비밀번호 입력필드(값이 &quot; * &quot;로 가려짐)type=&quot;checkbox&quot; : 체크박스 생성 (복수 선택 가능)type=&quot;radio&quot; : 라디오버튼 생성 (복수 선택 불가능)type=&quot;submit&quot; : 송신버튼 생성type=&quot;reset&quot; : 리셋버튼 생성type=&quot;button&quot; : 범용버튼 생성type=&quot;image&quot; : 이미지버튼 생성type=&quot;file&quot; : 파일올리기 위한 버튼 생성type=&quot;hidden&quot; : 보여지지 않는 필드 생성- name 속성을 통하여 input 이름 지정- value 속성을 통하여 input 초기값 지정- max 속성을 통하여 input 허용하는 값의 최대값 지정- min 속성을 통하여 input 허용하는 값의 최소값 지정- maxlength 속성을 통하여 input 의 최대 입력 문자수 지정- placeholder 속성을 통하여 사용자가 데이터를 입력하는데 힌트 지정 Block &lt;select&gt; 선택목록 생성 - autofocus 속성을 통하여 페이지를 로드할때 자동 포커스 지정- disabled 속성을 통하여 모든 조작이 불가능하게 하여 데이터를 서버에 전송 하지 않음- form 속성을 통하여 다른 폼 소유자와 명시적으로 연관시키기 위해 사용- multiple 속성을 통하여 복수 선택 가능- required 속성을 통하여 필수 요소인지 지정- size 속성을 통하여 제공할 목록 갯수 지정- name 속성을 통하여 식별자 지정- 한개 이상의 option요소를 포함하고 있어야 함- optgroup 요소를 통해 항목 그룹화 가능 Block &lt;optgroup&gt; &lt;select&gt;요소의 자식 요소이며 option요소로 이루어진 항목 - disabled 속성을 통하여 요소 모두를 비활성화 시킴- label 속성을 통하여 라벨을 지정(필수)- 동일한 레이블을 가진 옵션 요소들의 그룹- option 요소를 자식으로 가짐 Block &lt;option&gt; &lt;select&gt; 요소의 자식 요소로 각 항목을 정의 - disabled 속성을 통하여 옵션 요소를 비활성화 시킴- label 속성을 통하여 라벨을 지정- selected 속성을 통하여 기본으로 선택된 상태를 지정- value 속성을 통하여 선택 되었을때 값을 서버로 보냄- &lt;optgroup&gt;을 이용하여 그룹핑 가능 Inline-Block &lt;textarea&gt; 여러줄의 텍스트를 편집할 수 있는 컨트롤 생성 - autofocus 속성을 통하여 페이지 로드시 자동 포커스를 받도록 지정- cols 속성을 통하여 표시될 폭을 문자수로 지정- rows 속성을 통하여 표시될 줄 수 지정- name 속성을 통하여 식별자 지정- disabled 속성을 통하여 선택, 변경 불가능하게 하며 데이터가 서버에 전송 되지 않음- form 속성을 통하여 다른 폼 소유자와 명시적으로 연관시키기위해 사용- maxlength 속성을 통하여 속성을 통하여 최대 입력 문자수 지정- placeholder 속성을 통하여 사용자가 데이터를 입력하는데 힌트 지정- readonly 속성을 통하여 컨트롤 조작 불가능 상태로 만드며 데이터는 서버에 전송함- required 속성을 통하여 필수요소인지 지정 Block &lt;button&gt; 버튼 생성 - autofocus 속성을 통해 페이지 로드시 자동 포커스를 받도록 지정- disabled 선택, 변경 등 조작이 불가능하며 데이터도 서버에 전송되지 않음- name 속성을 통하여 식별자 지정- type 속성을 통하여 버튼의 종류 지정 가능type=&quot;submit&quot; : 폼을 제출type=&quot;reset&quot; : 폼을 리셋type=&quot;button&quot; : 아무것도 하지 않음value 속성을 통하여 전송되는 데이터 값 지정- input 요소로 생성하는 버튼과 같지만 이미지나 텍스트등을 포함해 유연한 디자인 가능 Block","categories":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/categories/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/tags/HTML/"},{"name":"Markup","slug":"Markup","permalink":"http://jinwoopark94.github.io/tags/Markup/"}]},{"title":"TIL-180212","slug":"TIL-180212","date":"2018-02-12T14:08:07.000Z","updated":"2018-02-12T14:27:44.699Z","comments":true,"path":"2018/02/12/TIL-180212/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/12/TIL-180212/","excerpt":"","text":"주말에 한 일 일주일 동안 했던 강의 내용 정리 Javascript 알고리즘 풀기 Window에 Shell 설치법과 ZSH 적용방법 블로그에 글로 정리하기 오늘 한 일 HTML Text markup 정리하기 Algorism 과제 3문제 풀기 Javascript 복습(Javascript란, Javascript History, Javascript in HTML) 내일 할 일 HTML list markup 정리하기 Algorism 과제 3문제 풀기 Javascript 복습(Javascript Syntax Basics)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"Javascript - About, History, Javascript in HTML","slug":"javascript-about","date":"2018-02-12T13:56:32.000Z","updated":"2018-02-12T14:04:33.308Z","comments":true,"path":"2018/02/12/javascript-about/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/12/javascript-about/","excerpt":"","text":"Javascript 란? 브랜던 아이크가 만든 1995년에 만들었던 스크립트 언어로 HTML, CSS와 함께 구성하는 요소이며 웹 페이지와 상호작용하도록 디자인된 스크립트 언어 OS위에서 구동하는 브라우저에서 동작하며 코드 실행시 순차적으로 하나씩 실행 C언어나 Java에서 많은 문법들을 차용했고 그 이외에도 Awk, Perl, Python으로부터도 영향을 받음 HTML과 CSS로 만들어진 웹페이지를 동적으로 변경해주는 언어 인터프리터 언어이기 때문에 Compile 필요없이 HTML 안에 기술 가능 멀티-패러다임 언어로 명령형, 함수형, 프로토타입 기반으로 객체지향 언어로서 사용 구글의 Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타임 환경인 Node.js의 등장으로 서버 사이드에서 Front-end 영역은 물론 Back-end 영역까지 아우르는 웹 프로그래밍 언어로 거듭남 모바일 웹/앱 개발 분야에서도 가장 중요한 언어로 주목 Single Page Application 웹 앱이 대중화가 되면서 Angular, React, Vue.js 등 다양한 프레임워크와 라이브러리가 확보 History 1995년 Navigator 2를 위하여 웹페이지에 포함하는 스크립트 언어로 개발되었으며 Livescript로 불리었음 1997년 ECMA-262라 불리는 명세가 완성되었으며 상표권 문제로 Livescript에서 ECMAScript로 변경 1999년 ECMAScript 3가 공개 되었음 10년뒤인 2009년 ECMAScript 5 HTML5와 함께 출현한 표준안(JSON과 Strict Mode가 추가됨) 2015년 ECMAScript 6가 공개 되었음(let, const 키워드, Arrow Function, class, Symbol 타입 등이 추가) ES3에서 ES5사이에서 ES4가 받아들이지 않으면서 ES4에 있던 기능들이 ES6에 다 적용됨 HTML 속의 Javascript Javascripts는 HTML 페이지 안에 인라인으로 쓸 수 있고 외부 파일로 분리하여 사용할 수 있음 1. &lt;script&gt; 요소 async - 외부 스크립트 파일을 불러올 때만 유효하며 브라우저가 가능하면 스크립트를 비동기적으로 실행하는 것을 가리킴 charset - 코드의 문자셋을 지정 defer - 외부 스크립트 파일을 불러올 때 사용하며 문서의 콘텐츠를 완전히 파싱하고 표시할 때까지 스크립트 실행을 지연해도 안전함을 나타냄 language - 원래의 의도는 ‘Javascript’, ‘JavaScript1.2’, ‘VBScript’ 처럼 나타낼 목적이였지만 지금은 폐기됨 src - 실행할 코드를 포함한 외부 파일의 위치를 지정 type - language 속성을 대체할 의도로 만들어졌으며 스크립트 언어의 콘텐츠 타입을 지정 2. Javascript 선언 Javascript 선언은 브라우저의 기본 설정에 맞추어감 대부분의 브라우저는 script 선언의 기본으로 파싱되어있기 때문에 자동으로 script만 선언해도 javascript라고 인식함 12345678// 옛날 하위 브라우저나 호환성을 위한 선언 방식 : HTML5가 되면서 아래의 속성인 language가 없는 것으로 무시되며 사용 X&lt;script type=\"text/javascript\" language=\"javascript\" src=\"text.js\"&gt;&lt;/script&gt;// HTML5 전 선언방식 : type을 명시해줘야 했음&lt;script type=\"text/javascript\" src=\"text.js\"&gt;&lt;/script&gt;// HTML5 선언방식 : type을 명시해주지 않아도 자동으로 HTML5에서 script를 javascript로 인식&lt;script src=\"text.js\"&gt;&lt;/script&gt; 3. Javascript 태그 위치 Javascript 태그는 일반적으로 &lt;head&gt; 요소 안에 넣는 것이 일반적이었는데 이유는 CSS 파일이나 Javascript 파일 같은 외부파일에 대한 참조를 한 곳에 관리하고자 함이었음 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Example HTML Page&lt;/title&gt; &lt;script src=\"text.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Page Contents--&gt; &lt;/body&gt;&lt;/html&gt; 하지만 Javascript를 &lt;head&gt;에서 불러온다면 자바스크립트 코드를 전부 내려받고, 파싱하고, 해석을 끝낼 때까지 페이지 렌더링이 멈추게 되어 페이지 렌더링 시간이 늦어지기 때문에 &lt;body&gt; 요소의 마지막에 페이지 콘텐츠에 사용함 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;Example HTML Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Page Contents--&gt; &lt;script src=\"text.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/tags/HTML/"},{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"}]},{"title":"HTML Tag - Text markup","slug":"html-markup1","date":"2018-02-12T08:13:49.000Z","updated":"2018-02-12T08:15:59.510Z","comments":true,"path":"2018/02/12/html-markup1/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/12/html-markup1/","excerpt":"","text":"HTML 태그 정리 Text Markup (텍스트 마크업) 태그 정의 사용 Display &lt;strong&gt; 해당 내용의 중요함을 나타냄 - strong을 중첩하면 중첩할 수록 중요하다고 할 수 있음- 브라우저에서 자동 font-weight가 bold처리 됨 Inline-Block &lt;b&gt; 텍스트를 굵게 장식하는 스타일 요소 - 키워드를 부각하기 위해 사용- 의미가 크게 없으므로 강조를 하기위한 목적으면 em, 중요성을 목적으로 하면 strong, 텍스트를 부각하려면 mark를 사용 Inline-Block &lt;mark&gt; 하나의 문서 내에 다른 문맥과의 관련성을 나타내기위해 마킹되거나 하이라이트 텍스트 표현 - 검색어와 매칭되는 부분을 하이라이팅 하기 위해 사용- 특정 부분의 주의를 끌기 위해 사용- 브라우저에서 자동 Background 효과가 처리 됨 Inline-Block &lt;em&gt; 해당 내용을 강조함 - em을 중첩하면 중첩할 수록 중요하다고 할 수 있음- 브라우저에서 자동 italic체로 표시 됨 Inline-Block &lt;i&gt; 텍스트를 이탤릭체로 장식하는 스타일 요소요새는 아이콘의 i와 같아서 아이콘을 넣을때에도 사용 - 의미가 크게 없으므로 강조를 하기위한 목적이면 em, 정의를 목적으로 하고 있다면 dfn을 사용 Inline-Block dfn 텍스트를 전문용어나 관용구등을 정의어로 지정 - 브라우저에서 자동 Italic체로 표시 Inline-Block &lt;blockquote&gt; 텍스트를 인용문으로 정의하며 인용된 곳의 원천 소스를 표시 - 텍스트를 블록레벨의 인용문으로 지정- 브라우저에서 자동 들여쓰기로 표현 Block q 다른 소스로부터 인용된 구문컨텐츠를 나타내며 인용해온 원본 주소를 나타냄 - 텍스트를 인라인레벨의 인용문으로 지정- 브라우저에서 자동 ' ', &quot; &quot;을 표현(따로 따옴표를 적을 필요 X) Inline-Block &lt;abbr&gt; 텍스트를 생략어로 지정 - 마우스를 올리면 title 속성의 내용이 나옴&lt;abbr title=&quot;Hyper Text Mark Language&quot;&gt;HTML&lt;/abbr&gt;- 스펠링을 한자씩 발음해줌(에이치. 티. 엠. 엘) Block &lt;acronym&gt; 텍스트를 두문자어로 지정 - 마우스를 올리면 title 속성의 내용이 나옴&lt;acronym title=&quot;Random Access Memory&quot;&gt;RAM&lt;/acronym&gt;- 스펠링을 한 단어로 발음해줌(램) Block &lt;address&gt; 연락처 정보를 나타냄 - &lt;footer&gt;안에 연락처 정보를 제공할 때 사용 Block &lt;pre&gt; 형식화된 텍스트의 블럭을 나타냄 - 연속하는 압축 문자의 압축을 금지- 요소 안에 텍스트는 파일에 그려진 그대로 보여짐(빈 칸도 타이핑한대로 입력) Block &lt;dfn&gt; 텍스트를 전문용어나 관용구등의 정의어로 지정 - &lt;dt&gt;,&lt;dd&gt;와 자주 사용됨- &lt;abbr&gt;태그와도 사용 가능하지만 &lt;abbr&gt;태그에 title 속성을 넣어줘야함 Block &lt;code&gt; 컴퓨터 코드를 나타냄 - XML요소 이름, 파일 이름, 컴퓨터 프로그램 등 컴퓨터가 인식할 수 있는 일련의 컴퓨터 코드를 나타냄 Inline-Block &lt;cite&gt; 작품의 제목을 나타냄 - 사람이름이 작품과 관련있다고 해도 &lt;cite&gt;로 마크업 X- &lt;cite&gt;는 작품의 제목 이상의 것을 포함하면 안됌 (제목을 마크업 하는 용도로 사용) Inline-Block &lt;del&gt; 문서로부터 삭제되었음을 나타냄 - 속성에는 cite(변화에 대한 설명), datetime(삭제한 시간)이 있음- 브라우저에서 자동으로 취소선을 그려줌 Block, Inline-Block &lt;ins&gt; 문서에 추가된것을 나타냄 - 브라우저에서 자동으로 언더바를 그려줌 Block, Inline-Block &lt;sub&gt; 텍스트를 아래첨자로 정의 - 단순히 타이포그래피로 사용되지 않고 만약 이 요소를 가용하지 않을때 의미가 변하는 경우 사용- 브라우저에서 자동으로 절반 문자 법선 아래에 표시하고 글자를 작게 해줌 Inline-Block &lt;sup&gt; 텍스트를 위첨자로 정의 - 단순히 타이포그래피로 사용되지 않고 만약 이 요소를 가용하지 않을때 의미가 변하는 경우 사용- 브라우저에서 자동으로 절반 문자 법선 위에 표시하고 글자를 작게 해줌 Inline-Block &lt;bdo&gt; 텍스트의 방향을 명시적으로 지정 - dir 속성을 반드시 사용해야하며 ltr(왼쪽 -&gt; 오른쪽), rtl(오른쪽 -&gt; 왼쪽)으로 방향 지정 가능 Inline-Block &lt;bdi&gt; 텍스트의 출력 방향을 브라우저가 판단해 표현 - 사용자의 나라를 판단하여 나라에 맞게 텍스트가 표현( 아랍어 같은 경우 오른쪽에서 글씨를 읽기 때문에 오른쪽으로 정렬) Inline-Block 참고 : https://www.w3schools.com https://developer.mozilla.org https://opentutorials.org","categories":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/categories/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/tags/HTML/"},{"name":"Markup","slug":"Markup","permalink":"http://jinwoopark94.github.io/tags/Markup/"}]},{"title":"HTML Tag - Wrapper, Comment, Page Information, Document Structure","slug":"html-markup","date":"2018-02-10T10:55:05.000Z","updated":"2018-02-12T08:10:47.514Z","comments":true,"path":"2018/02/10/html-markup/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/10/html-markup/","excerpt":"","text":"HTML 태그 정리 Documnet Wrapper(문서 바깥) &lt;!DOCTYPE&gt; (X)HTML 버전을 나타냄 &lt;HTML&gt; HTML 문서 &lt;HEAD&gt; 페이지 정보 &lt;BODY&gt; 페이지 컨텐츠 Comment (주석) &lt;!-- COMMENT TEXT--&gt; HTML안에 주석을 나타냄 Page Information (페이지 정보) 태그 정의 사용 &lt;base /&gt; 기본 URL - 문서에 포함된 모든 상대 URL들의 기준 URL을 나타냄 &lt;meta /&gt; META 정보 - META 관련 요소들로 나타내어질 수 없는 메타데이터를 나타냄 &lt;title&gt; 페이지 제목 - 브라우저의 타이틀 바나 페이지의 탭에 보여지는 문서의 제목을 정의함 &lt;link /&gt; 관련 자원 - 현재 문서와 외부 리소스와의 관계를 명시 &lt;style&gt; 스타일 자원 - HTML의 일부에 대한 스타일 정보를 포함 &lt;script&gt; 스크립트 자원 - (x)HTML 문서내에 실행 가능한 스크립트를 포함하거나 참조 Document Structure (문서 구조) 태그 정의 사용 Display &lt;main&gt; 페이지 메인 내용들을 묶은 구간 - body안에 문서나 앱의 주요 컨텐츠를 나타냄- 페이지에 2개 이상 있으면 안됨(Unique) Block &lt;header&gt; 소개나 탐색을 돕는 구간 - 일부 제목요소들을 포함할 수 있고 저자를 나타낼 수 있음예) 메인 TOP메뉴와 로고, 아이콘 등을 포함하는 구간 Block &lt;footer&gt; 저작권 정보나 서비스 제공자의 정보를 나타내는 구간 - 일반적으로 구성자 구획, 저작권 데이터, 관련된 문서의 링크 등을 나타냄- 주로 사이트 하단에 위치예) copyright, contact, sitemap ,관련된 문서 등을 포함하는 구간 Block &lt;div&gt; 문서의 영역을 지정(아무런 의미를 가지지 않음) - 스타일 또는 스크립트가 목적 - 같은 섹션에 포함된 여러개의 문단을 묶어 주석을 달고자 할때 유용하게 사용- 최대한 사용 안하는 것이 좋음예) 아무런 의미없이 스타일링 또는 스크립트만 사용하는 구간 Block &lt;section&gt; 문서나 응용 프로그램의 일반적인 구간을 표현 - 제목으로 시작하는 컨텐츠를 의미적으로 그룹핑할때 사용예) 소개, 뉴스 아이템, 연락처 등 Block &lt;aside&gt; 페이지 전체 내용과 관련이 있지만 주된 내용은 연관성 없는 내용 - 페이지에 연관성이 없다고 해서 단순 삽입어구를 사용하면 안됨예) 사이드바 Block &lt;article&gt; 문서내에 독립적인 컨텐츠를 나타냄 - 하나의 문서 안에 여러개의 article이 올 수 있음예) forum, 잡지, 신문 기사, 블로그 글, 댓글, 위젯, 가젯 등 독립적인 아이템 Block &lt;nav&gt; 페이지들을 이어주는 부분으로 네비게이션 링크로 구성됨 - 모든 링크그룹이 nav요소일 필요는 없음예) 메뉴, 리스트 형식 Block &lt;h[1-6]&gt; 큰 제목, 소 제목을 나타냄 - 대제목이나 소제목을 적을때 사용 Block &lt;p&gt; 문단을 나타냄 - 텍스트를 단락으로 정의 Block &lt;span&gt; 인라인 요소를 나타냄(아무런 의미를 가지지 않음) - 한 부분의 텍스트나 한 부분의 문서에 사용 Inline-Block &lt;br /&gt; 한 줄 내리기 - 텍스트 사용시 문단을 내리고 싶을 때 사용 None &lt;hr /&gt; 문단레벨에서 주제의 분리를 나타냄 - 화면 전환이나 섹션내에 다른 주제로 전환할때 사용단락들사이에 의미적 구분이 있을 때 사용 Block 참고 : https://www.w3schools.com https://developer.mozilla.org https://opentutorials.org","categories":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/categories/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://jinwoopark94.github.io/tags/HTML/"},{"name":"Markup","slug":"Markup","permalink":"http://jinwoopark94.github.io/tags/Markup/"}]},{"title":"Window-Agnoster-Theme","slug":"Window-Agnoster-Theme","date":"2018-02-09T14:15:13.000Z","updated":"2018-02-11T12:16:03.734Z","comments":true,"path":"2018/02/09/Window-Agnoster-Theme/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/09/Window-Agnoster-Theme/","excerpt":"","text":"1. 터미널 설치 (shell) 123sudo add-apt-repository ppa:gnome-terminatorsudo apt-get updatesudo apt-get install terminator 현재 터미널은 기본값으로 설정 되어야 하기 때문에 터미널을 재시작 (단축키: “Ctrl+Alt+T”). 2. ZSH 설치 1sudo apt-get install zsh 설치 후 터미널 재시작 (단축키: “Ctrl+Alt+T”) 3. Oh My ZSH 설치 12cdsh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 4. Powerline 폰트 설치 4-1. Powerline 폰트 설치 12345cdwget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otfwget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.confmv PowerlineSymbols.otf ~/.fonts/mkdir -p .config/fontconfig/conf.d #만약 폴더가 없다면 만들기 4-2. 폰트 캐시 없애기 1fc-cache -vf ~/.fonts/ 4-3. config파일 옮기기 1mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/ 5. ZSH 설정 1vi ~/.zshrc 테마 설정 [ZSH_THEME=“robbyrussell”]을 찾아서 [ZSH_THEME=“agnoster”]로 테마를 변경 테마 robbyrussell -&gt; agnoster 1ZSH_THEME=&quot;agnoster&quot; Solarize를 사용하여 테마 색깔 바꾸기 dconf가 설치 안되어 있다면 설치 1sudo apt-get install dconf-cli Solarize 설치 123git clone git://github.com/sigurdga/gnome-terminal-colors-solarized.git ~/.solarizedcd ~/.solarized./install.sh 옵션 중 자신이 원하는 옵션을 선택(추천 : 1번 dark theme) 그 다음 다시 옵션 1인 seebi’ dircolors-solarized을 선택 후 다운로드 모든 설치가 끝나면 vi ~/.zshrc 명령어를 입력하여 마지막 라인에 아래 코드를 추가 1eval `dircolors ~/.dir_colors/dircolors`","categories":[{"name":"Web Contents","slug":"Web-Contents","permalink":"http://jinwoopark94.github.io/categories/Web-Contents/"}],"tags":[{"name":"Window","slug":"Window","permalink":"http://jinwoopark94.github.io/tags/Window/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://jinwoopark94.github.io/tags/Ubuntu/"},{"name":"ZSH","slug":"ZSH","permalink":"http://jinwoopark94.github.io/tags/ZSH/"},{"name":"Oh My ZSH","slug":"Oh-My-ZSH","permalink":"http://jinwoopark94.github.io/tags/Oh-My-ZSH/"}]},{"title":"TIL-180209","slug":"TIL-180209","date":"2018-02-09T13:58:12.000Z","updated":"2018-02-09T14:01:57.111Z","comments":true,"path":"2018/02/09/TIL-180209/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/09/TIL-180209/","excerpt":"","text":"오늘 한 일 강의 내용 정리 (프로젝트를 위한 학습 - 협업, 개발주기) Javascript 처음부터 복습 시작하기(Javascript란 무엇인가) Window에 shell 설치 후 ZSH, 테마 적용 내일 할 일 일주일 동안 했던 강의 내용 정리 Javascript 알고리즘 풀기 Window에 Shell 설치법과 ZSH 적용방법 블로그에 글로 정리하기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"TIL-180208","slug":"TIL-180208","date":"2018-02-08T13:59:32.000Z","updated":"2018-02-09T13:58:38.306Z","comments":true,"path":"2018/02/08/TIL-180208/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/08/TIL-180208/","excerpt":"","text":"오늘 한 일 강의 내용 정리 (Javascript Execution Context, Closure) 코드 주석과 가독성에 대하여 정리해보기 오늘 했던 강의 내용 러버독 해보기 내일 할 일 강의 내용 정리 (프로젝트를 위한 학습 - 협업, 개발주기) Javascript 처음부터 복습 시작하기(Javascript란 무엇인가)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"Javascript - Execution-context","slug":"javascript-execution-context","date":"2018-02-08T13:50:43.000Z","updated":"2018-02-12T13:58:18.733Z","comments":true,"path":"2018/02/08/javascript-execution-context/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/08/javascript-execution-context/","excerpt":"","text":"실행 컨텍스트 Scope, Hoisting, This, Function, Closure 등의 동작 원리를 담고 있는 Javascript의 핵심원리 ECMAScript 스펙에서는 실행 가능한 코드를 형상화 하고 구분하는 추상적인 개념 실행 가능한 코드가 실행되기 위해 필요한 컨테이너 혹은 Wrapper 결국 실행 컨텍스트는 코드가 실행 되기 위해서는 코드를 형상화하고 구분해야 하는 공간(컨테이너 혹은 Wrapper)을 실행 컨텍스트라고 함 실행 가능한 코드 전역 코드 : 전역 영역에 존재하는 코드 Eval 코드 : Eval 함수로 실행되는 코드 Eval 코드는 사용안하는 것이 좋으므로 사용 X 함수 코드 : 함수 내에 존재하는 코드 실행에 필요한 정보 변수 전역변수 지역변수 매개변수 객체의 프로퍼티 함수 선언 변수의 유효범위(Scope) this 실행 컨텍스트 스택(Stack) 실행 컨텍스트는 스택(Stack)으로 생성하고 소멸하며 스택의 구조인 FILO(First In Last Out)의 구조를 가짐 컨트롤이 실행 가능한 코드로 이동하면 논리적 스택 구조를 가지는 새로운 실행 컨텍스트 스택이 생성 전역 코드(Global code)로 컨트롤이 진입하면 전역 실행 컨텍스트가 생성되고 실행 컨텍스트 스택에 쌓임 함수를 호출하면 해당 함수의 실행 컨택스트가 생성되며 직전에 실행된 코드블럭의 실행 컨텍스트 위에 쌓임 함수 실행이 끝나면 해당 함수의 실행 컨텍스트를 파기하고 직전의 실행 컨텍스트에 컨트롤을 반환 실행 컨텍스트 객체 실행 컨텍스트 객체는 총 3가지가 있음 객체 설명 예) 1. Variable Object 변수, 함수 선언 정보를 관리 vars, function declarations, arguments 2. Scope Chain Scope에 대한 정보를 관리 scope(순회할 수 있는 객체로 가지고 있음) 3. this Value this에 대한 정보를 관리 this 1. Variable Object (VO / 변수객체) 실행 컨텍스트가 생성되면 자바스크립트 엔진은 실행에 필요한 여러 정보들을 담을 객체를 생성 변수 매개변수와 인수 정보 함수 선언 전역 컨텍스트의 경우 Variable Object는 유일하며 모든 전역 변수, 함수 등을 포함하는 전역 객체를 가리킴 함수 컨텍스트의 경우 Variable Object는 AO(Activation Object)를 가리키며 매개변수와 인수들의 정보를 가지고 있는 arguments object도 같이 추가됨 2. Scope Chain 일종의 리스트로서 중첩된 함수의 스코프의 레퍼런스를 차례로 저장 함수 실행 중 변수를 만나면 그 변수를 현재 Scope에서 찾아보고 값이 없다면 다음 리스트를 가리키는 Activation Object를 검색하고 이 과정을 반복하여 만약 검색을 실패하면 Reference 에러를 발생 Variable Object 안에 함수가 선언되었다면 함수는 [[scopes]]의 프로퍼티를 가짐 3. this value this 프로퍼티는 this 값이 할당 실행 컨텍스트의 생성 과정 1. 전역 코드에 진입 먼저 코드에 진입에 하게되면 실행 컨텍스트의 공간과 전역 객첵 생성됨 초기 상태의 전역 객체에는 빌트인 객체와 DOM, BOM이 설정 전역 코드로 진입하면 전역 실행 컨텍스트가 생성되고 실행 컨텍스트에 스택으로 쌓임 스코프 체인의 생성과 초기화, Variable Instantiation 실행, this value를 결정 실행 처리 스코프 체인의 생성과 초기화 Variable Instantiation(변수 객체화) 실행 this value 결정 1-1. 스코프 체인의 생성과 초기화 실행 컨텍스트가 생성되고 제일 먼저 스코프 체인의 생성과 초기화가 실행 1-2. Variable Instantiation 실행 Variable Object에 프로퍼티 값을 추가하는 것을 의미하며 변수, 매개변수(arguments), 함수 선언을 Variable Object에 추가함 함수가 있을 경우 함수 객체가 값으로 설정되고 이 후 변수 선언으로 각 변수에 undefined를 넣음 생성된 모든 함수에는 [[Scopes]] 프로퍼티를 가지는데 이 [[Scopes]] 프로퍼티는 함수 객체만이 소유하는 내부 프로퍼티로 현재 컨텍스트의 스코프 체인이 참조하고 있는 객체를 값으로 설정 1-3. this value 결정 this value가 결정되기 이전에 this는 전역 객체를 가리키고 있다가 함수 호출 패턴에 의해 값이 할당됨 2. 전역 코드 실행 2-1. 변수 값의 할당 변수들 중 처음부터 검색하여 값이 undefiend라고 설정이 된 것에 각 프로퍼티 값을 지정 2-2. 함수 foo의 실행 함수가 실행되기 시작하면 함수 실행 컨텍스트가 생성하며 실행 위의 컨텍스트의 생성 과정의 순서로 다시 만듬 2-3. 변수의 선언 처리 변수 호이스팅을 통해 변수는 선언단계와 초기화 단계가 한번에 이루어지며 값은 undefined를 반환 12345678910111213var x = 'xxx';function foo () &#123; var y = 'yyy'; function bar () &#123; var z = 'zzz'; console.log(x + y + z); &#125; bar();&#125;foo();","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"execution-context","slug":"execution-context","permalink":"http://jinwoopark94.github.io/tags/execution-context/"}]},{"title":"Javascript - Cosure","slug":"javascript-closure","date":"2018-02-08T13:50:17.000Z","updated":"2018-02-12T13:58:15.079Z","comments":true,"path":"2018/02/08/javascript-closure/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/08/javascript-closure/","excerpt":"","text":"클로저(Closure)란? 내부함수와 외부함수가 있는 관계에서 내부함수가 참조하는 외부함수를 참조할때 내부함수가 외부함수보다 life-cycle이 더 오래 살아있는 현상을 클로저라고 함 실행 컨텍스트 관점 클로저 내부함수가 유효한 상태에서 외부함수가 종료하여 외부함수의 실행 컨텍스트가 반환되어도, 외부함수 실행 컨텍스트 내의 Activation object(변수, 함수 선언 등의 정보를 가지고 있다)는 유효하여 내부함수가 스코프 체인을 통해 참조 자유변수란 ? 내부함수가 참조하고 있는 변수 클로저의 활용 Javascript안에서의 클로저는 강력한 기능이지만 성능이나 자원적인 면에서 손해를 볼 수 있음 경험을 통한 사용방법을 터특해야함 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;p&gt;Counting&lt;/p&gt; &lt;button type=\"button\" onclick=\"myFunction()\"&gt;Count!&lt;/button&gt; &lt;p id=\"change_value\"&gt;0&lt;/p&gt; &lt;script&gt; var add = (function () &#123; var counter = 0; return function () &#123; return ++counter; &#125;; &#125;()); function myFunction() &#123; document.getElementById('change_value').innerHTML = add(); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 변수 add에는 즉시실행함수(immediately-invoked function expression)가 호출되어 그 결과 무명함수 function () {return ++counter;}를 반환 즉시실행함수는 한번만 실행되므로 add에 담겨있는 함수가 호출될 때마다 변수 counter가 재차 초기화될 일은 없음. 이때 중요한 것은 add에 담겨있는 함수 function () {return ++counter;}는 외부 함수의 변수 counter에 접근할 수 있고 변수 counter는 자신을 참조하는 함수가 소멸될 때가지 유지된다는 것인데 이러한 현상을 Closure라고 함 변수 counter는 외부에서 직접 접근할 수 없는 private 변수이므로 전역 변수를 사용했을 때와 같이 의도되지 않은 변경을 걱정할 필요도 없음","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Closure","slug":"Closure","permalink":"http://jinwoopark94.github.io/tags/Closure/"}]},{"title":"TIL-180207","slug":"TIL-180207","date":"2018-02-07T14:11:05.000Z","updated":"2018-02-08T14:08:40.408Z","comments":true,"path":"2018/02/07/TIL-180207/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/07/TIL-180207/","excerpt":"","text":"오늘 한 일 시험 틀렸던 내용들 정리 Sass 예제실습에 직접 사용해보기 Javascript Built-in, Standard-Built-in 정리 알고리즘 문제 풀기 내일 할 일 강의 내용 정리 (Array Object 객체) 알고리즘 문제 풀기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"Javascript - Built-in","slug":"javascript-Built-in","date":"2018-02-07T13:47:25.000Z","updated":"2018-02-12T13:58:11.662Z","comments":true,"path":"2018/02/07/javascript-Built-in/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/07/javascript-Built-in/","excerpt":"","text":"Built-in Object(내장 객체) 웹페이지를 표현하기 위한 공통의 기능을 제공하며 수많은 개발자들에 의한 신뢰할 수 있는 객체 브라우저가 로드되자마자 바로 사용 가능 Standard Built-in Objects (or Global Objects) BOM (Browser Object Model) DOM (Document Object Model) 1. Standard Built-in or Global Objects Javascript는 프로그램 전체의 영역에서 공통적으로 필요한 기능을 제공 일반적으로 대문자로 시작 여기서 Global은 전역 객체(Global Objects)와 다름 전역객체는 브라우저에서는 window를 객체를 의미하며, 서버에서는 global 객체를 의미함 2. BOM (Browser Object Model) 브라우저 객체 모델은 브라우저 탭 또는 브라우저 창의 모델을 생성 최상위 객체는 window 객체로 브라우저 창 또는 탭을 표현함 3. DOM (Document Object Model) 현재 내가 사용중인 웹페이지의 모델을 생성함 최상위 객체는document 객체로 전체 문서를 표현 참고 : http://poiemaweb.com","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Built-in","slug":"Built-in","permalink":"http://jinwoopark94.github.io/tags/Built-in/"}]},{"title":"Javascript - Standard Built-in","slug":"javascript-Standard-Built-in","date":"2018-02-07T13:46:43.000Z","updated":"2018-02-12T13:58:31.202Z","comments":true,"path":"2018/02/07/javascript-Standard-Built-in/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/07/javascript-Standard-Built-in/","excerpt":"","text":"전역 객체(Global Object) 모든 객체의 유일한 최상위 객체를 의미함 new 연산자를 이용하여 새롭게 생성 불가 전역 스코프를 갖게 됨 전역 객체의 자식 객체를 사용할 때 전역 객체의 기술은 생략 가능 Browser Server(Node.js) window global 12// window.alert('Hello world!');;alert('Hello world!'); 전역 프로퍼티(Global property) 전역 객체의 프로퍼티를 의미하고 애플리케이션 전역에서 사용하는 값들을 나타내기 위해 사용 1. Infinity 양/음의 무한대를 나타내는 숫자값 Infinity를 가짐 12console.log(3/0); // Infinityconsole.log(-3/0); // -Infinity 2. NaN 숫자가 아님을 나타내는 숫자값 NaN을 가짐 12console.log(1 * 'String'); // NaNconsole.log(typeof NaN); // number 3. undefined 기본자료형 undefined를 값으로 가짐 123var a;console.log(a); // undefinedconsole.log(typeof undefined); // undefined 전역 함수(Global function) 애플리케이션 전역에서 호출할 수 있는 함수로서 전역 객체의 메소드 1. eval() 전달된 문자열 구문 또는 표현식을 평가 또는 실행함 사용자로 부터 입력받은 콘텐츠를 실행하는 것은 보안에 매우 취약하므로 사용을 가급적 금지 하는 것이 좋음 123456eval(string)// string: code 또는 표현식을 나타내는 문자열. 표현식은 존재하는 객체들의 프로퍼티들과 변수들을 포함할 수 있음var x = 7, y = 4;console.log(eval('x * y')); // 28 2. isFinite() 매개변수에 전달된 값이 유한수인지 검사하여 그 결과를 Boolean으로 반환 12345isFinite(testValue)// testValue: 검사 대상 값console.log(isFinite(3)); // trueconsole.log(isFinite('Hello')); // false 3. isNaN() 매개변수에 전달된 값이 NaN인지 검사하여 그 결과를 Boolean으로 반환 값이 숫자가 아닌 경우, 숫자로 변환 1234567isNaN(testValue)// testValue: 검사 대상 값isNaN(NaN) // trueisNaN(37) // falseisNaN('park') // true: 'park' -&gt; NaNisNaN('') // false: '' -&gt; 0 4. parseFloat() 매개변수에 전달된 문자열을 부동소수점 숫자로 변환하여 반환 첫 숫자만 반환되고 숫자로 변환할 수 없으면 NaN을 반환 123456parseFloat(string)// string: 변환 대상 문자열parseFloat('3.14'); // 3.14parseFloat('10.00'); // 10parseFloat('34 45 66'); // 34 5. parseInt() 매개변수에 전달된 문자열을 정수형 숫자로 변환하여 반환 첫 숫자만 반환되고 숫자로 변환할 수 없으면 NaN을 반환 123456parseInt(string);parseInt('23'); // 23parseInt('10.33'); // 10parseInt('10 20 30'); // 30parseInt(' 60 '); // 60 6. encodeURI() / decodeURI() encodeURI() : 매개변수로 전달된 URI를 인코딩 decodeURI() : 매개변수로 전달된 URI을 디코딩 네트워크를 통해 정보를 공유할 때 모든 시스템에서 읽을 수 있도록 ASCII Charactor-set으로 변환 12345678910111213encodeURI(URI)// URI: 완전한 URIdecodeURI(encodedURI)// encodedURI: 인코딩된 완전한 URIvar uri = 'http://example.com?id=sdasq1123&amp;name=박진우';var enc = encodeURI(uri);var dec = decodeURI(enc);console.log(enc);// http://example.com?id=sdasq1123&amp;name=%CE%3D%C4%EC%9B%85%EB%AA%A8console.log(dec);// http://example.com?id=sdasq1123&amp;name=박진우 7. encodeURIComponent() / decodeURIComponent() encodeURIComponent() : 매개변수로 전달된 URI component(구성 요소)를 인코딩 decodeURIComponent() : 매개변수로 전달된 URI component(구성 요소)를 디코딩 1234567891011121314encodeURIComponent(URI)// URI: URI component(구성 요소)decodeURIComponent(encodedURI)// encodedURI: 인코딩된 URI component(구성 요소)var uriShort = 'id=sdasq1123&amp;name=박진우';enc = encodeURIComponent(uriShort);dec = decodeURIComponent(enc);console.log(enc);// id=sdasq1123&amp;name=%CE%3D%C4%EC%9B%85%EB%AA%A8console.log(dec);// id=sdasq1123&amp;name=박진우 참고 : http://poiemaweb.com","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Standard Built-in","slug":"Standard-Built-in","permalink":"http://jinwoopark94.github.io/tags/Standard-Built-in/"}]},{"title":"Javascript - Regexp","slug":"javascript-regexp","date":"2018-02-06T13:15:22.000Z","updated":"2018-02-12T13:58:28.516Z","comments":true,"path":"2018/02/06/javascript-regexp/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/06/javascript-regexp/","excerpt":"","text":"정규표현식 문자열에서 특정 내용을 찾거나 대체 또는 발췌하는데 사용 반복문과 조건문을 사용한 복잡한 코드도 정규표현식을 이용하면 매우 간단하게 표현 주석이나 공백을 허용하지 않고 여러가지 기호를 혼합하여 사용하기 때문에 가독성이 좋지않은 문제가 있음 정규표현식을 사용하는 Javascript 메소드 RegExp.prototype.exec() RegExp.prototype.test() : True or False 반환 String.prototype.match() String.prototype.replace() String.prototype.search() String.prototype.split() 123456789101112var targetStr = 'This is a pen.';var regexr = /is/ig;// RegExp 객체의 메소드console.log(regexr.exec(targetStr)); // [ 'is', index: 2, input: 'This is a pen.' ]console.log(regexr.test(targetStr)); // true// String 객체의 메소드console.log(targetStr.match(regexr)); // [ 'is', 'is' ]console.log(targetStr.replace(regexr, 'IS')); // ThIS IS a pen.console.log(targetStr.search(regexr)); // 2console.log(targetStr.split(regexr)); // [ 'Th', ' ', ' a pen.' ] Flag(플래그) 플래그의 종류는 아래와 같음 검색 대상이 1개 이상이라도 첫번째 매칭만 대상만 검색함 플래그 의미 설명 i Ignore Case 대소문자를 구별하지 않고 검색한다. g Global 문자열 내의 모든 패턴을 검색한다. m Multi Line 문자열의 행이 바뀌더라도 검색을 계속한다. 12345678var targetStr = 'Is this all there is?';var regexr = /is/;console.log(targetStr.match(regexr)); // [ 'is', index: 5, input: 'Is this all there is?' ]regexr = /is/ig;console.log(targetStr.match(regexr)); // [ 'Is', 'is', 'is' ] 패턴 찾고자 하는 대상을 문자열로 지정 특별한 의미를 가지는 메타문자(Metacharacter) 또는 기호로 표현 가능 12345var targetStr = 'AA BB Aa Bb';// 임의의 문자 3개var regexr = /.../; // 3자리 문자 추출console.log(targetStr.match(regexr)); // [ 'AA ', index: 0, input: 'AA BB Aa Bb' ] 이때 패턴은 반복하지 않는다. 여기서 반복하기 위해서 Flag g를 사용하고 Flag i를 추가하면 대소문자 구별을 하지 않음 12345var targetStr = 'AA BB Aa Bb';// 임의의 한문자를 반복 검색var regexr = /A/gi;console.log(targetStr.match(regexr));// [ 'A', 'A' , 'A', 'a' ] |를 사용하면 or의 의미를 가지며 +를 사용하면 분해되지 않은 단어 레벨로 추출함 12345678910111213// 1번var targetStr = 'AA AAA BB Aa Bb';// 'A' 또는 'B'가 한번이상 반복되는 문자열을 반복 검색var regexr = /A+|B+/g;console.log(targetStr.match(regexr)); // [ 'AA', 'AAA', 'BB', 'A', 'B' ]// 2번var targetStr = 'AA BB Aa Bb';// 'A' 또는 'B'가 한번이상 반복되는 문자열을 반복 검색var regexr = /[AB]+/g;console.log(targetStr.match(regexr)); // [ 'AA', 'BB', 'A', 'B' ]1번과 2번은 같다. \\d는 숫자를 의미한다. \\D는 \\d 0-9를 의미함 12345678var targetStr = 'AA BB Aa Bb 24,000';// '0' ~ '9' 또는 ','가 한번이상 반복되는 문자열을 반복 검색var regexr = /[\\d,]+/g;console.log(targetStr.match(regexr)); // [ '24,000' ]// '0' ~ '9'가 아닌 문자(숫자가 아닌 문자) 또는 ','가 한번이상 반복되는 문자열을 반복 검색var regexr = /[\\D,]+/g;console.log(targetStr.match(regexr)); // [ 'AA BB Aa Bb ', ',' ] \\w는 알파벳과 숫자를 의미한다. \\W는 \\w와 반대로 동작 알파벳을 의미함 12345678var targetStr = 'AA BB Aa Bb 24,000';// 알파벳과 숫자 또는 ','가 한번이상 반복되는 문자열을 반복 검색var regexr = /[\\w,]+/g;console.log(targetStr.match(regexr)); // [ 'AA', 'BB', 'Aa', 'Bb', '24,000' ]// 알파벳과 숫자가 아닌 문자 또는 ','가 한번이상 반복되는 문자열을 반복 검색var regexr = /[\\W,]+/g;console.log(targetStr.match(regexr)); // [ ' ', ' ', ' ', ' ', ',' ] 더 많은 내용은 [Regexr.com]을 참고 참고 : http://poiemaweb.com","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"Regexp","slug":"Regexp","permalink":"http://jinwoopark94.github.io/tags/Regexp/"}]},{"title":"Javascript - Number","slug":"javascript-number","date":"2018-02-06T13:15:01.000Z","updated":"2018-02-12T13:58:25.294Z","comments":true,"path":"2018/02/06/javascript-number/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/06/javascript-number/","excerpt":"","text":"기본자료형 Number 레퍼(Wrapper) 객체 기본자료형 number를 다룰 때 유용한 프로퍼티와 메소드를 제공하는 레퍼(wrapper) 객체 변수 또는 객체의 속성(Property)가 숫자 값을 가지고 있다면 사용 가능 Number Constructor Number() 생성자 함수를 통해 생성 인자가 숫자로 변환될 수 없다면 NaN 반환 12345var x = new Number(123); // 생성 방법 1var x = 123; // 생성 방법 2var y = new Number('123'); // 123var z = new Number('str'); // NaN Number Property Static 프로퍼티로 Number 객체를 생성할 필요없이 Number.propertyName 형태로 사용 숫자에 관련된 상수 1. Number.EPSILON Number.EPSILON은 JavaScript에서 표현할 수 있는 가장 작은 수 중요 ! 컴퓨터에서 표현할 수 있는 다음 수 12345678910console.log(0.1 + 0.2); // 0.30000000000000004console.log(0.1 + 0.2 == 0.3); // false!!!function isEqual(a, b)&#123; // Math.abs는 절댓값을 반환한다. // 즉 a와 b의 차이가 JavaScript에서 표현할 수 있는 가장 작은 수인 Number.EPSILON보다 작으면 같은 수로 인정할 수 있다. return Math.abs(a - b) &lt; Number.EPSILON;&#125;console.log(isEqual(0.1 + 0.2, 0.3)); 2. Number.MAX_VALUE 자바스크립트에서 사용 가능한 가장 큰 숫자(1.7976931348623157e+308)를 반환 MAX_VALUE보다 큰 숫자는 Infinity 3. Number.MIN_VALUE 자바스크립트에서 사용 가능한 가장 작은 숫자(5e-324)를 반환 MAX_VALUE보다 작은 숫자는 0으로 변환 4. Number.POSITIVE_INFINITY 양의 무한대 Infinity를 반환 5. Number.NEGATIVE_INFINITY 음의 무한대 -Infinity를 반환 6. Number.NaN 숫자가 아님(Not-a-Number)을 나타내는 숫자값 12console.log('how'); // NaNconsole.log(6 * 'string'); // NaN Number Method Number Method안에 있는 것들을 형 변환을 안함 1. Number.isFinite() 매개변수로 전달된 값이 유한한 값인지 아닌지 검사하여 그 결과를 Boolean으로 반환 123456Number.isFinite(testValue)// testValue: 검사 대상 값Number.isFinite('Hi'); // falseNumber.isFinite(24); //trueNumber.isFinite(null) //false Number.isFinite()는 전역 함수 isFinite()와 차이 전역 함수 isFinite() : 인수를 숫자로 형 변환하여 검사를 수행 Number.isFinite() : 인수를 형 변환을 안함 따라서 Number.isFinite()가 더 엄격하게 검사함 2. Number.isInteger() 매개변수로 전달된 값이 정수인지 아닌지 검사하여 그 결과를 Boolean으로 반환 1234567Number.isInteger(testValue)// testValue: 검사 대상 값Number.isInteger(5-2) //trueNumber.isInteger(0) //trueNumber.isInteger(0.5) //falseNumber.isInteger('123') //false 3. Number.isNaN() 매개변수에 전달된 값이 NaN인지를 검사하여 그 결과를 Boolean으로 반환 123456Number.isNaN(testValue)// testValue: 검사 대상 값Number.isNaN('str') // falseNumber.isNaM(29) // falseNumber.isNaN('29') // false 4. Number.isSafeInteger() 매개변수에 전달된 값이 정수 범위안에 있는지를 확인하여 Boolean으로 반환 123456Number.isSafeInteger(testValue)// testValue: 검사 대상의 값Number.isSafeInteger(123) // trueNumber.isSafeInteger(0) // trueNumber.isSafeInteger(10000000000000001) // false 5. Number.prototype.toExponential() 대상을 지수 표기법으로 변환하여 문자열로 반환 12345678numObj.toExponential([fractionDigits])// fractionDigits: 0~20 사이의 정수값으로 소숫점 이하의 자릿수를 나타낸다. 옵션으로 생략 가능var numObj = 77.1234;console.log(numObj.toExponential()); // logs 7.71234e+1console.log(numObj.toExponential(4)); // logs 7.7123e+1console.log(numObj.toExponential(2)); // logs 7.71e+1 e(Exponent) 앞에 있는 숫자에 10의 n승이 곱하는 형식 6. Number.prototype.toFixed() 매개변수로 지정된 소숫점자리를 반올림하여 문자열로 반환 12345678910111213numObj.toFixed([digits])// digits: 0~20 사이의 정수값으로 소숫점 이하 자릿수를 나타낸다. 기본값은 0이며 옵션으로 생략 가능var numObj = 12345.6789;// 소숫점 이하 반올림console.log(numObj.toFixed()); // '12346'// 소숫점 이하 1자리수 확보, 나머지 반올림console.log(numObj.toFixed(1)); // '12345.7'// 소숫점 이하 2자리수 확보, 나머지 반올림console.log(numObj.toFixed(2)); // '12345.68'// 소숫점 이하 6자리수 확보, 나머지 반올림console.log(numObj.toFixed(6)); // '12345.678900' 7. Number.prototype.toPrecision() 123456789numObj.toPrecision([precision])// precision: 1~21 사이의 정수값으로 전체 자릿수를 나타낸다. 옵션으로 생략 가능var numObj = 15345.6789;// 전체자리수 유효console.log(numObj.toPrecision()); // '12345.6789'// 전체 1자리수 유효, 나머지 반올림console.log(numObj.toPrecision(1)); // '2e+4' 8. Number.prototype.toString() 숫자를 문자열로 변환 12345678910numObj.toString([radix])// radix: 2~36 사이의 정수값으로 진법을 나타내고 옵션으로 생략 가능var count = 10;console.log(count.toString()); // '10'console.log((17).toString()); // '17'var x = 16;console.log(x.toString(2)); // '10000'console.log(x.toString(8)); // '20' 9. Number.prototype.valueOf() Number 객체의 기본자료형 값(primitive value)을 반환 12345678numObj.valueOf()var numObj = new Number(10);console.log(typeof numObj); // objectvar num = numObj.valueOf();console.log(num); // 10console.log(typeof num); // number 참고 : http://poiemaweb.com","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"number","slug":"number","permalink":"http://jinwoopark94.github.io/tags/number/"}]},{"title":"Javascript - Math","slug":"javascript-math","date":"2018-02-06T13:14:48.000Z","updated":"2018-02-12T13:58:22.138Z","comments":true,"path":"2018/02/06/javascript-math/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/06/javascript-math/","excerpt":"","text":"수학 상수와 함수를 위함 built-in 객체 수학 상수와 함수를 위한 프로퍼티와 메소드를 제공하는 빌트인 객체 별도의 생성자가 없는 정적(static) 프로퍼티와 메소드 Math Property Math.PI PI 값(π ≈ 3.141592653589793)을 반환 1Math.PI; // 3.141592653589793 Math Method 1. Math.abs() 반드시 0 또는 양수이어야하는 절댓값(absolute value)을 반환 12345Math.abs('-1'); // 1Math.abs(-2); // 2Math.abs(null); // 0Math.abs('string'); // NaNMath.abs(); // NaN 2. Math.round() 숫자를 가장 인접한 정수로 올림/내림 12345678910111213ar x;// Returns the value 20x = Math.round(20.49);// Returns the value 21x = Math.round(20.5);// Returns the value -20x = Math.round(-20.5);// Returns the value -21x = Math.round(-20.51); 3. Math.sqrt() 양의 제곱근 반환 1Math.sqrt(9); // 3 4. Math.ceil() 지정된 숫자를 자신보다 큰, 가장 가까운 정수로 올림 1Math.ceil(1.4); // 2 5. Math.floor() 지정된 숫자를 자신보다 작은, 가장 가까운 정수로 내림 소숫점 이하의 값을 제거한 정수 12Math.floor(1.9); // 1Math.floor(9.1); // 9 6. Math.random() 0과 1 사이의 임의의 숫자를 반환 0은 포함되지만 1은 포함되지 않음 12345console.log(Math.random()); // 0 ~ 1 미만의 소수 (0.8208720231391746)// 랜덤 정수 취득var randomNum = Math.floor((Math.random() * 10) + 1); // 1 ~ 10의 정수console.log(randomNum); 7. Math.pow() 첫번째 인수를 밑, 두번째 인수를 지수로하여 거듭제곱함 12Math.pow(7, 2) // 49Math.pow(2, 5) // 32 8. Math.max() argument 중에서 가장 큰 수를 반환 12345678910Math.max(1, 2, 3) ; // 3var arr = [1, 2, 3];var max = Math.max.apply(null, arr); // 3// 여기서 apply의 null은 arr은 this를 어떤 것을 쓸것인지를 나타내고 argument의 리스트를 나타냄apply도 똑같은 함수이며, apply(\"this 여부\", \"배열\");call도 비슷한 함수이며, call(\"this 여부\", 1,2,3);// ES6var max = Math.max(...arr); // 3 9. Math.min() argument 중에서 가장 작은 수를 반환 1234567Math.min(1, 2, 3); // 1var arr = [1, 2, 3];var min = Math.min.apply(null, arr); // 1// ES6var min = Math.min(...arr); // 1 참고 : http://poiemaweb.com","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"math","slug":"math","permalink":"http://jinwoopark94.github.io/tags/math/"}]},{"title":"Javascript - Array","slug":"javascript-array","date":"2018-02-06T13:14:35.000Z","updated":"2018-02-12T13:58:08.754Z","comments":true,"path":"2018/02/06/javascript-array/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/06/javascript-array/","excerpt":"","text":"배열 (Array) 1개의 변수안에 여러개의 값을 순차적으로 저장할 때 사용 배열의 생성 1. 배열 리터널 0개 이상의 값을 쉼표를 구분하여 대괄호([])로 묶음 존재하지 않으면 undefined반환 123456789101112var emptyArr = [];var arr = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']; // 요소console.log(emptyArr[1]); // undefinedconsole.log(arr[1]); // 'one'console.log(emptyArr.length); // 0console.log(arr.length); // 10console.log(typeof arr); // object 배열의 리터널은 객체 리터널과는 다르게 Property명이 없고 각 요소의 값만 존재함 2. Array() 생성자 함수 배열은 리터널 방식으로 생성되며 이 방식도 결국 Array()함수의 배열 생성하는 것을 단순화 시킨 것임 Array.prototype.constructor 프로퍼티로 접근 가능 1234new Array(arrayLength)var arr = new Array(2);// 값을 넣지 않았으므로 'undefined'가 들어가 있음 배열 요소의 추가와 삭제 1. 배열 요소의 추가 배열도 객체이므로 동적으로 요소를 추가할 수 있음 2. 배열 요소의 삭제 배열도 객체이므로 배열의 요소를 delete 연산자를 통해 삭제 가능함 123456789var arr = [];arr[0] = 'zero';arr[1] = 'one';arr[3] = 'three';console.log(arr); // [\"zero\", \"one\", empty , \"three\"]delete arr[0];console.log(arr); // [empty , \"one\", empty , \"three\"] Array Property 1. Array.length 배열의 길이를 나타내줌 1234567var arr = [1,2,3,4,5];console.log(arr.length);// 배열에 요소를 추가할 때도 사용 가능arr[arr.length] = 6;console.log(arr); Array Method 1. Array.isArray() 객체가 배열이면 true, 배열이 아니면 false를 반환 123456Array.isArray(); // falseArray.isArray([]); // trueArray.isArray([1, 2]); // trueArray.isArray(new Array()); // trueArray.isArray(&#123;&#125;); // falseArray.isArray(null); // false 2. Array.prototype.indexOf() 지정된 요소를 배열에서 검색하여 반환 123var arr = [1, 2, 3, 4];arr.indexOf(2); // 3arr.indexOf(4); // -1 3. Array.prototype.concat(item…) 인수로 넘어온 값들을 자신의 복사본에 요소로 추가하고 반환 원본 배열은 변경 X 1234567891011121314var a = ['a', 'b', 'c'];var b = ['x', 'y', 'z'];var c = a.concat(b);console.log(c); // ['a', 'b', 'c', 'x', 'y', 'z']var d = a.concat('String');console.log(d); // ['a', 'b', 'c', 'String']var e = a.concat(b, true);console.log(e); // ['a', 'b', 'c', 'x', 'y', 'z', true]// 원본 배열은 변하지 않는다.console.log(a); // [ 'a', 'b', 'c' ] 4. Array.prototype.join() 배열 요소 전체를 연결하여 생성한 문자열을 반환 separator를 지정하지 않았을 때 ','를 가짐 123456789101112str = arr.join([separator = ','])var arr = ['a', 'b', 'c', 'd'];var x = arr.join();console.log(x); // 'a,b,c,d';var y = arr.join('');console.log(y); // 'abcd'var z = arr.join(':');console.log(z); // 'a:b:c:d' 참고 : http://poiemaweb.com","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/categories/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://jinwoopark94.github.io/tags/Javascript/"},{"name":"array","slug":"array","permalink":"http://jinwoopark94.github.io/tags/array/"}]},{"title":"TIL-180206","slug":"TIL-180206","date":"2018-02-06T13:07:49.000Z","updated":"2018-02-07T14:11:20.764Z","comments":true,"path":"2018/02/06/TIL-180206/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/06/TIL-180206/","excerpt":"","text":"오늘 한 일 강의 내용 정리 시험 내용 중 몰랐던 내용 다시 살펴보기 Javascript 표준 빌트인 객체에 대해 다시 Daily-Summary 작성 내일 할 일 알고리즘 문제 풀기 Sass 공부하고 내용 정리 다음주 공부계획짜기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"TIL-180205","slug":"TIL-180205","date":"2018-02-05T15:38:26.000Z","updated":"2018-02-07T14:11:22.184Z","comments":true,"path":"2018/02/06/TIL-180205/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/06/TIL-180205/","excerpt":"","text":"오늘 한 일 강의 내용 정리(Javascript 표준빌트인객체) git reset, revert 기능 공부하기 (Daily-Summery 작성 내용 덮어쓰기로 인한 복구작업) 내일 시험 볼 내용 복습 알고리즘 과제 4문제 풀기 내일 할 일 강의 내용 정리 시험 내용 중 몰랐던 내용 다시 살펴보기 Javascript 표준 빌트인 객체에 대해 다시 Daily-Summery 작성","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"웹페이지 효율적인 작업방법","slug":"web-contents","date":"2018-02-04T02:20:56.000Z","updated":"2018-02-04T02:36:49.462Z","comments":true,"path":"2018/02/04/web-contents/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/04/web-contents/","excerpt":"","text":"웹페이지 효율적인 작업방법 1. 모바일에서 사용할 목적을 명확히 하여 필요한 내용 위주로 반응형 웹을 효율적으로 사용 사용자가 어떤 목적을 갖고 웹사이트를 방문하는지에 대해 생각해보고 모바일에서 필요한 내용 위주로 보여주기 방문자들의 생각이나 의견을 변화시키는 것이 중요! 2. 데스크탑 -&gt; 태블릿 -&gt; 모바일작업이 아닌 모바일 -&gt; 태블릿 -&gt; 데스크탑 작업 모바일 디자인은 최대한 단순하며 초점이 있게 디자인을 해야함 작업을 간소화하는 장점이 있음 로딩하는 데 시간이 걸리는 모든 것들(소스, 이미지, 동영상 등)을 과감히 버려라 McKnight Kurland사의 Frank Kurland에 따르면, 모바일 사용 인구가 세계 인구의 87%에 달함 3. 소스코드(CSS, Javascript)를 모두 압축하자 모든 웹페이지 작업이 완료되면 CSS와 Javascript를 Minify하자 CSS, Javascript 압축 사이트 : https://www.minifier.org/ 4. 이미지 파일을 모두 압축하자 원본 이미지와 압축한 이미지는 엄청난 데이터 크기가 차이남 예) 700KB -&gt; 250KB (이미지에 따라 다를 수 있음) 이미지 파일 압축 사이트 : https://compressor.io/ 일반인이 눈으로 구별하기 매우 힘들정도로 무손실에 가까운 이미지 파일 제공 이외에도 포토샵이 있다면 이미지 파일을 저장할 때 포토샵 웹용으로 저장 기능을 사용하여 이미지를 압축하자! 5. 로딩 시간을 최대한으로 줄이자 웹사이트가 로드되는 데에 최대 4초 미만이 걸리게 하자 나의 목표를 내 사이트보다 빠르게 로딩되는 웹사이트를 벤치마킹해서 내 것으로 만들기 6. 종속성을 줄이자 CSS를 통해 이미지 로드 최소한의 외부 스타일 시트를 유지 이미지 대신 CSS를 사용 이미지 스프라이트 사용 웹 폰트 아이콘을 사용 인라인 프레임 사용 X 인라인 확장 가능한 벡터 그래픽(SVG)를 사용 'm.'으로 시작하는 모바일 사이트로의 리디렉션을 제거하고, 대신 빠르고 신뢰할 수 있는 CDN(Content Delivery Networks; 콘텐츠 전송 네트워크)을 사용할 것을 권장","categories":[{"name":"Web Contents","slug":"Web-Contents","permalink":"http://jinwoopark94.github.io/categories/Web-Contents/"}],"tags":[{"name":"Web Contents","slug":"Web-Contents","permalink":"http://jinwoopark94.github.io/tags/Web-Contents/"}]},{"title":"TIL-180202","slug":"TIL-180202","date":"2018-02-02T15:01:09.000Z","updated":"2018-02-02T15:03:58.866Z","comments":true,"path":"2018/02/03/TIL-180202/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/03/TIL-180202/","excerpt":"","text":"오늘 한 일 강의 내용 정리(Javascript function kinds, Scope, this) 알고리즘 1개 풀기(Mini-Max Sum) 오늘 했던 내용들 러버덕 해보기 주말 할 일 한 주간의 내용 정리 알고리즘 2개 풀기 HTML / CSS 전체적인 내용 다시 확인하기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180202-Daily-Summary - Javascript - 객체, 함수의 종류, 프로토타입 객체, Scope, this","slug":"180202-Daily-Summary","date":"2018-02-02T14:48:33.000Z","updated":"2018-02-02T14:58:19.820Z","comments":true,"path":"2018/02/02/180202-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/02/180202-Daily-Summary/","excerpt":"","text":"함수 객체의 속성(property) arguments 속성(property) 함수 호출시 함수 값에 arguments를 자동 생성하고 인수들의 정보를 담고 있는 순회가능한 유사배열 객체 유사배열 객체(array-like object) : 배열처럼 움직이는 객체 123456789101112function multiply(x, y) &#123; // 방어코드 넣기 console.log(arguments); return x * y;&#125;multiply(); // &#123;&#125;multiply(1); // &#123; '0': 1 &#125;multiply(1, 2); // &#123; '0': 1, '1': 2 &#125;multiply(1, 2, 3); // &#123; '0': 1, '1': 2, '2': 3 &#125; caller 속성(property) 자신이 호출한 함수를 의미 123456789function restaurant(personFunc)&#123; var table = personFunc(); return desk;&#125;function person()&#123; return person.caller;&#125;console.log(restaurant(person)); // function restaurant의 속성을 가지고 있음 length 속성(property) 함수에서 매개변수의 개수를 의미 12function person( name, gender, country )&#123;&#125;console.log(person.length); // 3 name 속성(property) 기명 함수 또는 익명 함수에 사용되며 12function person( name, gender, country )&#123;&#125;console.log(person.name); // 여기서의 person name은 함수 function의 이름인 person이 출력됨 ____proto 속성(property) 함수 객체를 포함한 모든 객체가 가지고 있는 프로퍼티 자신의 부모역할을 할 프로포타입 객체를 가르킴 함수의 프로포타입 객체는 Function.prototype 이며 이것도 함수 123456function phone(number) &#123; return number;&#125;console.log(phone.__proto__ === Function.prototype);console.log(Object.getPrototypeOf(phone) === Function.prototype); prototype 속성(property) 함수 객체만 가지고 있는 프로퍼티 함수 객체가 생성자로 사용될 때 생성된 객체의 부모 역할을 하는 객체를 가르킴 함수가 생성될 때 만들어지며 constructor 프로퍼티를 가지는 객체를 가지는 객체를 가리킴 함수는 생성자 함수로 사용될 가능성이 있기 때문에 12345678function phone(number) &#123; return number;&#125;console.log(phone.__proto__ === Function.prototype); // true ①console.log(phone.__proto__ === phone.prototype); // falseconsole.log(phone.prototype.constructor === phone); // true ②console.log(phone.__proto__.constructor === phone.prototype.constructor); // false 함수의 다양한 형태 즉시호출함수표현식 (IIFE, Immediately Invoke Function Expression) 함수 정의와 동시에 즉시 호출하는데 딱 한번 호출함 실행이 필요한 초기화 처리등에 사용 가능 123456789// 기명 즉시호출함수(function nameFunction() &#123;&#125;());// 익명방법(function () &#123;&#125;()); 내부 함수 (Inner function) 함수 내부에 있는 함수를 내부함수 123456//부모함수function parent() &#123; // 내부함수 function child()&#123; &#125;&#125; 자식은 부모의 변수에 접근이 가능하지만 부모는 자식의 변수에 접근 불가능함 안의 내부함수는 부모함수의 외부에서 접근할 수 없음 콜백 함수 (Callback function) 특정한 이벤트가 발생할때 호출되는 함수 나중에 호출하는 함수 12345678910function laterCall() &#123; var name = 'Park'; // 0.03초 후에 함수 실행 setTimeout(function () &#123; console.log('My name is ' + name); &#125;, 300);&#125;doSomething(); // My name is Park 이라고 출력됨 프로토타입 객체 Javascript는 프로토타입 기반 객체지향 프로그래밍 언어 모든 객체는 자신의 부모 역할 담당하는 객체와 연결되어 있음 부모 객체를 Prototype 객체라고 부르며 줄여서 Prototype이라고 함 결국 Prototype 객체는 생성자 함수에 의해 생성된 각 객체들에 제공되는 공통부분의 프로퍼티를 제공하기 위해 사용 123456var restaurant = &#123; foodName: 'pasta', value: 16000&#125;;console.log(restaurant.hasOwnProperty('name')); // 값은 : true restaurant라는 객체에는 hasOwnProperty라는 정보가 없지만 값은 true가 출력이 된다. 그 이유는 만약 선택한 객체에 값이 없으면 그 다음 부모 객체로 찾아가고 또 없으면 이 과정을 반복하여 결국 Object 객체까지 가서 없으면 error값을 반환 한다. constructor 프로퍼티 모든 Prototype 객체는 constructor 이라는 Property를 가지는데 이것은 생성자 함수를 가르킴 1234567891011function Restaurant(food)&#123; this.food = food;&#125;var person = new Restaurant('pasta');console.log(Restaurant.prototype.constructor === Restaurant);console.log(person.constructor === Restaurant);console.log(Restaurant.constructor === Function); Prototype chain(프로토타입 체인) Property나 메소드로 접근하려고 할 때 해당 객체에 Property 값 또는 메소드가 없다면 각각의 객체에 가지고 있는 ____proto( 부모역할을 할 프로포타입 객체를 가르킴)의 위치를 찾아 계속 반복 수행을 하는 것 Prototype chain의 동작 조건 자바스트립트의 프로토타입 체이닝은 결국 상속 리터널 방식 객체의 Prototype 체인 객체를 생성하는 과정에서 Object() 생성자 함수로 객체를 생성하는데 Object() 생성자 함수도 다른 함수와 같은 함수이기 때문에 prototype 속성이 있음 결국 객체(Object)를 생성하면 그 객체에 Object.prototype을 프로포타입 객체로 가짐 생성자 방식 객체의 Prototype 체인 함수를 생성하는 과정에서 Function() 생성자 함수를 통해 함수가 생성되는데 모든 함수의 Prototype 객체는 Function.prototype이고 또한 생성자 함수도 함수 객체이므로 Function.prototype 객체이다. 모든 방식은 결국 모든 객체의 부모인 Object.prototpye 객체에서 끝나는데 이것을 프로토타입 체인의 종점이라고 함 Prototype 객체의 확장 및 변경 Prototype 객체도 객체이므로 객체를 추가, 수정 또는 삭제 할 수 있음 이 말은 즉 Object.prototype 객체를 추가, 수정 또는 삭제 가능 기본자료형(Primitive data type)의 확장 기본자료형인 문자열이 객체와 유사하게 동작하는데 기본자료형으로 프로퍼티나 메소드를 호출할 때 기본자료형과 연관된 객체로 일시적으로 변환되어 프로토타입 객체를 공유하고 이후 다시 기본자료형으로 변환 123456789var str = 'test';console.log(typeof str); // 자료형console.log(str.constructor === String); // trueconsole.dir(str);var strObj = new String('test');console.log(typeof strObj); // 객체console.log(strObj.constructor === String); // trueconsole.dir(strObj); 기본자료형 중 문자열일 경우 &quot;.&quot;을 찍는 순간 String() 생성자 함수로 객체로 바꿔버림 Scope (유효범위) Scope의 종류 전역변수 : 어디서든 참조할 수 있는 변수 전역 객체(Global scope)는 window의 property 지역변수 : 지역에서만 참조할 수 있는 변수 함수 지역내에만 지역변수를 선언 가능 생존기간(life-cycle) 조절 전역변수 : 어플리케이션이 끝날 때 까지 남아 있음 지역변수 : 함수가 종료될 때 까지 남아 있음 this 인스턴스 자신을 가르키는 변수이며 객체 자신에 대한 참조 값을 가지고 있음 특징 함수가 호출될 때 argument 객체와 this를 전달 받음 함수 또는 메소드 안에 있는 것은 모두 전역객체 단, 2가지를 제외함 메소드 내에 있는 경우 생성자 함수에 있는 경우 함수 호출 패턴에 따른 this의 참조값 1. 함수 호출 패턴 전역객체는 객체중에 가장 상위 객체인데 딱 유일한 하나이며 browser에서는 ‘window’ node에서는 'global’을 포함 12345// browser consolethis === window // true// in Terminal - Nodethis === global // true 2. 메소드 호출 패턴 함수 자체가 객체의 Property면 메소드 호출 패턴으로 호출 메소드 내부에 this는 메소드를 호출한 객체에 바인딩됨 12345678910111213function Person(name) &#123; this.name = name;&#125;Person.prototype.getName = function() &#123; return this.name;&#125;var me = new Person('Park');console.log(me.getName());Person.prototype.name = 'Woo';console.log(Person.prototype.getName()); 3. 생성자 호출 패턴 기존 함수에 new 연산자를 붙여서 호출하면 해당 함수는 생성자 함수로 동작 동작 방식 빈 객체 생성과 동시에 this 바인딩 순서 빈 객체를 만듬 this를 빈 객체를 가리킴 마지막에 자신의 프로토타입 객체로 설정 this를 통한 property 생성 생성된 객체를 반환함 반환문이 없는 경우, this에 바인딩 되어있는 새로운 객체를 반환 반환문이 this가 아닌 다른 객체를 반환하는 경우, this가 아닌 해당 객체가 반환 12345678var Person = function(name) &#123; // 생성자 함수 코드 실행 전 -------- 1 this.name = name; // --------- 2 // 생성된 함수 반환 -------------- 3&#125;var me = new Person('Lee');console.log(me.name); 참고 : http://poiemaweb.com","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180201","slug":"TIL-180201","date":"2018-02-01T14:37:38.000Z","updated":"2018-02-05T05:57:37.185Z","comments":true,"path":"2018/02/01/TIL-180201/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/01/TIL-180201/","excerpt":"","text":"오늘 한 일 강의 내용 정리(Javascript Object, Javascript Immutability, Javascript Function) 강의 예습하기(Javascript Scope, this) 오늘 했던 내용들 러버덕 해보기 알고리즘 1개 풀기(Staircase) 내일 할 일 강의 내용 정리(Javascript Scope, this) 알고리즘 1개 풀기(Mini-Max Sum) 오늘 했던 내용들 러버덕 해보기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180201-Daily-Summary - Javascript - 객체, 속성, 메소드, 함수, 호이스팅","slug":"180201-Daily-Summary","date":"2018-02-01T13:41:00.000Z","updated":"2018-02-01T13:48:22.660Z","comments":true,"path":"2018/02/01/180201-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/02/01/180201-Daily-Summary/","excerpt":"","text":"객체(Object)란 ? 나 자신(Subject)이 아닌 모든 인식가능한 것들을 객체라고 하며 기본자료형을 제외한 나머지 데이터와 그 데이터가 관련되는 동작(절차, 방법, 기능)을 모두 포함하는 것 이름과 값의 쌍인 속성(Property)들을 포함하는 컨테이너 속성(Property) 란? 객체안에서 이름과 값으로 구성됨 이름 : 빈 문자열을 포함하는 문자열과 숫자 숫자를 쓰면 내부적으로 문자열로 바꿈 예) 숫자 1을 썼다고 가정했을때 문자열 1로 바꿈 값 : undefined를 제외한 모든 값 1234var container &#123; name : 'Jinwoo`s container'; // 이름 : 값&#125; Method 란? 객체안에서 속성(Property)값에 동작(절차, 방법 기능)을 갖고 있는 것 결론 : 객체 안에 있는 함수 123456var person = &#123; name : 'Jin', // Property age : '100', // Property speak : function()&#123;&#125;// Method // 이름 : 값(함수: 동작-&gt; 절차, 방법, 기능)&#125; 객체 생성 방법 1. 객체 리터럴 중괄호를 시작으로 생성하며 {}안에 아무 것도 입력하지 않으면 빈 객체로 생성되고 입력시 Property 이름 : 프로퍼티 값을 기술하여 생성가능 1234567var emptyObject = &#123;&#125;; // 빈 객체 생성var person = &#123; name : 'Jin', // Property age : '100', // Property speak : function()&#123;&#125; // Method&#125;; 2. Object() 생성자 함수 New 연산자와 Object() 생성자 함수를 이용하여 빈 객체를 생성 가능하고 이후 객체 안에 Property를 추가를 하는 방식 1234567var person = new Object(); // 빈 객체 생성person.name = 'Jin', // person의 객체에 name이 Jin인 Property를 추가person.age = '100',person.speak = functioon()&#123; console.log(\"안녕 난 \" + person.name + \"이야\");&#125; 브라우저안에 있는 자바스크립트 엔진은 우리(개발자?)를 위해서 내장 함수인 Object() 생성자 함수를 통해 단순화 시킨 위에 1번 객체 리터널 방식의 축약법임 3. 생성자 함수 우리가 원하는 객체를 만들기 위해서 함수를 정의 할 수 있는 방식 Java에서의 Class 방식이며 중복을 제거하기 위해 만들어진 함수 일반적으로 대문자로 시작 (함수 구별하여 기술 혼란을 방지하기 위해서) 속성(Property)값만 다른 여러개의 객체를 생성할때 사용 12345678910111213function Person(name, gender) &#123; this.name = name; this.gender = gender; this.speak = functioon()&#123; console.log(\"안녕 난 \" + this.name + \"이야\"); &#125;;&#125;// 인스턴스의 생성var person1 = new Person('Park', 'male');var person2 = new Person('Woo', 'female');// 여기서 person1이 실행되면 Person이라는 함수에 'Park', 'male'이라는 매개 변수를 가지고 실행하여 함수안에 this.name 값에 'Park'이 들어가고 this.gender에 'male' 이라는 값이 들어가며 결국 person1의 객체의 name 값은 'Park', gender 값은 'male'이 들어감 어떤 상황때 리터널 방식과 생성자 방식을 사용할까? 리터널 방식 생성자 방식 객체를 하나만 만들때 유리 객체를 여러개 만들때 유리 강사님 曰 : 둘중에 아무거나 하나 만들어보고 삽질을 통해 얻자. 사용방법을 터득하면 자신의 레벨이 한단계 올라감 객체 프로프티 접근 프로퍼티 이름 기본적으로 문자열을 포함하지만 문자열 이외에도 숫자를 포함하는데 숫자는 암묵적 형변환으로 인해 문자열로 바뀜 Property 이름의 문자열이므로 따음표(’’, “”)를 사용 사용 가능한 유효한 이름일 경우 따음표 생략 가능 유효한 이름이 아닌 경우 : ‘first-name’ (캐밥표기법) 예약어는 사용하면 안됨 프로퍼티 값 읽기 마침표(.) 표기법 대괄호([ ]) 표기법 프로퍼티 이름과 마찬가지로 유효한 이름이 아닌 캐밥 표기법으로 될때 사용 예) person[‘first-name’] 123456789101112131415var person = &#123; 'first-name': 'jinwoo', 'last-name': 'Park', 1: 10&#125;;console.log(person);console.log(person.first-name); // NaN: undefined-undefinedconsole.log(person[first-name]); // ReferenceError: first is not definedconsole.log(person['first-name']); // 'jinwoo'console.log(person['1']); // 10console.log(person[1]); // 10 정수형인 1을 내부적으로 문자열 1로 바꾸므로console.log(person.1); // SyntaxError 객체에 존재하지 않는 속성(Property)를 참조하면 undefined를 반환 프로퍼티 값 변경 객체로 접근하여 프로퍼티 값을 새롭게 변경 1234567var person = &#123; firstName: 'jinwoo', lastName: 'Park'&#125;;person.firstName = 'haha';console.log(person.firstName); // 'haha' 프로퍼티 동적 생성 빈 객체를 만든 상태에서 프로퍼티를 추가할 경우 사용 1234567var person = &#123; firstName: 'jinwoo', lastName: 'Park'&#125;;person.age = '20';console.log(person.age); // '20' 코드에 사용하지 않는 것이 좋음 프로퍼티 삭제 delete라는 명령어를 사용하여 삭제 12345678var person = &#123; firstName: 'jinwoo', lastName: 'Park', age : 20&#125;;delete person.age;console.log(person.age); // undefined 코드에 사용하지 않는 것이 좋음 for-in 문 객체의 문자열 키를 순회하기 위한 문법 배열에는 사용하지 않는 것이 좋음 객체는 속성(Property)의 순서가 보장 X 배열 요소들만을 순회 X 위의 단점을 극복하기 위해 ES6에서 &quot;for-of&quot;문이 추가 Pass-by-reference (참조형) Object 타입은 mutable 방식으로 객체형 또는 참조형이라고 하며 속성(Property)를 변경 또는 추가, 삭제가 가능하므로 변경가능한 값 Object의 값은 동적으로 계속 바뀔 수 있으므로 메모리의 Heap 영역에 저장 Pass-by-value 기본자료형은 immutable 방식이며, 기본자료형의 값은 값으로 전달되기 때문에 값이 한번 정해지면 변경 불가능함 기본자료형 값은 정적으로 바뀔 수가 없으므로 고정된 메모리의 Stack 영역에 저장 인스턴스의 정의 new 연산자와 생성자 함수를 통해 만든 객체 객체 분류 Host Object( 생성자 ) : 사용자가 생성된 객체 Built-in Object(내장 객체) : 웹페이지 등을 표현 하기위해서 Standard Built-in Object(표준 빌드인 객체) : 프로그램 전체 영역에 공통적으로 필요한 기능을 개발자 각자가 일일이 작성하는 것을 줄이기 위해 제공 BOM (Browser Object Model) : browser와 대화를 하기위해서 DOM (Document Object Model) : 동일한 문서를 표현하고, 저장하고, 조작하는 방법을 제공 순수 함수와 비순수 함수의 차이 순수 함수 SideEffect가 일어나지 않도록 방지하는 함수 비순수 함수 SideEffect가 일어날 수 있는 함수는 비순수함수 함수란? 어떤 작업을 수행할때 필요한 일련의 구문들을 그룹화하기 위한 개념 함수를 생성하는 방식 1. 함수 선언식 123456function testFunction(number) &#123; // 방어코드 작성 (Type Check) return number * number;&#125; 함수명 : 함수를 구별할 수 있는 식별자 역할 예) square 매개변수 목록 : 함수명 옆에 괄호로 구별하며 안에 콤마(,)로 분리함 예) number 함수 몸체 : 중괄호({})로 감싸며 return 문으로 결과를 반환 만약 return을 생략하면 return 값을 'undefined’를 결과값으로 반환 2. 함수 표현식 함수 선언식과 마찬가지로 동일하게 함수 리터널 방식으로 정의 123var test = function(number) &#123; return number * number;&#125;; 일급 객체란 ? 값처럼 사용할 수 있는 것 무명 리터럴(무명 함수)로 표현이 가능 변수나 자료구조(객체, 배열)에 저장 가능 함수의 파라미터(매개 변수)로 전달 가능 반환값으로 사용 가능 내부적으로 함수 표현식으로 바꿈 재귀함수란 ? 자기 함수를 자신이 호출하는 것 3. Function() 생성자 함수 함수 표현식과 함수 선언식이 결국 리터널 방식으로 정의되는데 결국 Function() 생성자 함수로 함수를 생성하는 것을 단순화 시킨 것 12var test = new Function('number', 'return number * number');console.log(square(10)); // 100 호이스팅(Hoisting) Javascript 호이스팅은 총 3단계로 나눌 수 있음 선언단계 : 코드를 실행하기 전 전체적으로 브라우저가 확인을 한 후 변수나 함수 등을 실행 컨택스트안에 넣음 초기화단계 : 모든 메모리에 'undefined’를 넣음 할당단계 : 값에 맞게 포인터를 함 변수 호이스팅(Variable Hoisting) 변수 호이스팅은 위의 단계 중 2단계인 초기화단계까지 실행되며 변수가 선언이 안되었더라도 있다고 인식하며 'undefiend’라는 값을 가지고 있음 함수 호이스팅(Function Hoisting) 함수 호이스팅은 스크립트가 로딩되는 시점 초기화를 하고 3단계 할당단계인 VO(Variable object)에 저장하여 어디에서든 실행도 할 수 있지만 함수 선언문에서만 유효함 매개변수(parameter, 인자) 함수의 작업을 위해 추가적인 정보가 필요한 경우 매개변수를 지정하여 사용 매개 변수 vs 인자 1234567// 매개 변수 - 인수var foo = function (p1, p2) &#123; console.log(p1, p2);&#125;;// 인자foo(1); // 1 undefined Call-by-value 기본자료형은 값에 의한 호출로 동작하며 함수를 호출하여 매개변수를 변경해도 값은 변경되지 않음 123456789function foo(primitive) &#123; primitive += 1; return primitive;&#125;var x = 0;console.log(foo(x)); // 1console.log(x); // 0 Call-by-value 객체형(참조형)은 참조에 의한 호출로 동작하며 함수를 호출하여 매개변수를 변경하면 값이 변경됨 12345678910111213141516171819function changeVal(primitive, obj) &#123; primitive += 100; obj.name = 'Kim'; obj.gender = 'female';&#125;var num = 100;var obj = &#123; name: 'Lee', gender: 'male'&#125;;console.log(num); // 100console.log(obj); // Object &#123;name: 'Lee', gender: 'male'&#125;changeVal(num, obj);console.log(num); // 100console.log(obj); // Object &#123;name: 'Kim', gender: 'female'&#125; arguments 프로퍼티 함수 호출시 함수 값에 arguments를 자동 생성하고 인수들의 정보를 담고 있는 순회가능한 유사배열 객체 유사배열 객체 : 배열처럼 움직이는 객체 123456789101112function multiply(x, y) &#123; // 방어코드 넣기 console.log(arguments); return x * y;&#125;multiply(); // &#123;&#125;multiply(1); // &#123; '0': 1 &#125;multiply(1, 2); // &#123; '0': 1, '1': 2 &#125;multiply(1, 2, 3); // &#123; '0': 1, '1': 2, '2': 3 &#125; caller 프로퍼티 자신이 호출한 함수를 의미 length 프로퍼티 함수에서 매개변수의 개수를 의미 name 프로퍼티 기명 함수 또는 익명 함수에 사용되며 proto 프로퍼티 함수 객체를 포함한 모든 객체가 가지고 있는 프로퍼티 자신의 부모역할을 할 프로토타입 객체를 가리킴 참고 : http://poiemaweb.com","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180131","slug":"TIL-180131","date":"2018-01-31T13:21:05.000Z","updated":"2018-01-31T13:24:06.038Z","comments":true,"path":"2018/01/31/TIL-180131/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/31/TIL-180131/","excerpt":"","text":"오늘 한 일 지금까지 했던 Javascript 총정리 Sass 공부하고 정리하기 알고리즘 1개 풀기(Plus Minus) 내일 할 일 강의 내용 정리(Javascript Object, Javascript Immutability, Javascript Function) 강의 예습하기(Javascript Scope, this) 알고리즘 1개 풀기(Staircase)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"Sass - Sass란?, 장점, 특징, SCSS","slug":"sass-intro1","date":"2018-01-31T07:59:20.000Z","updated":"2018-01-31T13:39:14.319Z","comments":true,"path":"2018/01/31/sass-intro1/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/31/sass-intro1/","excerpt":"","text":"Sass (Syntactically Awesome StyleSheets) Sass 란? Hampton Catlin이 설계하고 Nathan Weizenbaum가 개발한 스타일 시트 언어 기초 언어(CSS)에 결함을 보정하면서 추가 기능과 유용한 도구를 제공하기 위해 개발됨 CSS를 확장하는 스크립팅 언어로 컴파일러를 통해 일반 CSS 문법 형태로 변환 (CSS pre-processor) Sass 장점 코드 재활용성 높여줌 코드 가독성 높여줌 간단한 표기법으로 CSS를 구조화하여 표현 가능 여러명이서 작업 시 발생하는 구문의 수준 차이를 평준화 Scss 란? 2010년 5월 sass 버전 업데이트로 기존 Sass 문법을 줄이고 CSS문법을 살린 SCSS가 나옴 CSS가 지원하는 모든 문법과 기능을 사용 가능 Sass에 기존 CSS에 없던 추가된 기능 변수, 조건문, 반복문 기능 import 기능 Mixin 기능 Extend / Inheritance 기능 Nesting 기능 SCSS, Sass 특징 비교 SCSS 구문은 CSS와 유사함 중괄호 사용 -&gt; {} 세미콜론 사용 -&gt; ; 변수 기호 -&gt; $ 지정 표시 -&gt; : 확장자명 -&gt; .scss $width: 100px; $color: green; div { width: $width; background-color: $color; } Sass 구문은 Ruby와 유사함 중괄호 사용 X 엄격한 들여쓰기 X 세미콜론 X 변수 기호 -&gt; ! $ 할당 부호 -&gt; = 확장자명 -&gt; .sass $width: 100px $color: green div width: $width background-color: $color Sass를 개발한 개발자는 SCSS와 Sass의 큰 차이점은 UI라고 함 (UI만 다르기 때문에 SCSS, Sass 서로 convert로 변환 가능) $ sass-convert style.sass style.scss $ scss-convert style.scss style.sass","categories":[{"name":"sass","slug":"sass","permalink":"http://jinwoopark94.github.io/categories/sass/"}],"tags":[{"name":"sass","slug":"sass","permalink":"http://jinwoopark94.github.io/tags/sass/"}]},{"title":"180131-Daily-Summary - 알고리즘 문제풀이","slug":"180131-Daily-Summary","date":"2018-01-31T07:53:05.000Z","updated":"2018-01-31T07:56:05.166Z","comments":true,"path":"2018/01/31/180131-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/31/180131-Daily-Summary/","excerpt":"","text":"알고리즘 문제 풀기 for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 출력하시오. ex) 0 2 4 6 8 for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 작은 수부터 문자열로 출력하고, for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오. ex) 0 2 4 6 8 ex) 9 7 5 3 1 while문을 사용하여 0부터 10까지 정수 중에서 짝수만을 작은 수부터 출력하시오. ex) 0 2 4 6 8 while문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오. ex) 9 7 5 3 1 for 문을 사용하여 0부터 10미만의 정수의 합을 출력하시오 ex) 45 1부터 20까지의 정수 중에서 2 또는 3의 배수가 아닌 수의 총합을 구하시오. 1, 5, 7, 11, 13, 17, 19 =&gt; 73 1부터 20까지의 정수 중에서 2 또는 3의 배수인 수의 총합을 구하시오. 2, 3, 4, 6, 8, 9, 10, 12, 14, 15, 16,18, 20 =&gt; 137 두 개의 주사위를 던졌을 때, 눈의 합이 6이 되는 모든 경우의 수를 출력하는 코드를 작성하시오. [ 1, 5 ] [ 2, 4 ] [ 3, 3 ] [ 4, 2 ] [ 5, 1 ] 삼각형출력하기 다음을 참고하여 *(별)로 높이가 5인(var line = 5) 삼각형을 문자열로 완성하라. 개행문자(‘\\n’)를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자(‘\\n’)로 끝나도 관게없다. 트리 출력하기 다음을 참고하여 *(별)로 트리를 문자열로 완성하라. 개행문자(‘\\n’)를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자(‘\\n’)로 끝나도 관계 없다. 문제 1 : for문으로 짝수 구하기 function evenNumber(){ for(var i=0;i&lt;10;i++){ if(i%2 === 0) console.log(i); } } evenNumber(); 문제 2 : for문으로 홀수 구하기 function oddNumber() { var strNumber = ''; for (var i = 10; i &gt; 0; i--) { if (i % 2 === 1) strNumber += i; } console.log(strNumber); for (i = 10; i &gt; 0; i--) { if (i % 2 === 1) console.log(i); } } oddNumber(); 문제 3 : while문으로 짝수 구하기 function evenNumberwhile() { var i = 0; while (i &lt; 10) { if (i % 2 === 0) console.log(i); i++; } } evenNumberwhile(); 문제 4 : while문으로 홀수 구하기 function oddNumberwhile() { var i = 10; while (i &gt; 0) { if (i % 2 === 1) console.log(i); i--; } } oddNumberwhile(); 문제 5 : for문으로 0부터 10미만까지 정수의 합 구하기 function sumNumber() { var sum = 0; for(var i=0;i&lt;10;i++){ sum += i; } console.log(sum); } sumNumber(); 문제 6 : 1부터 20까지 정수중 2 또는 3의 배수가 아닌 수의 합 function sumelseEONumber(number) { var sum = 0; for (var i = 0; i &lt;= number;i++){ if(i % 2 === 0 || i % 3 === 0) continue; sum += i; } console.log(sum); } sumelseEONumber(20); 문제 7 : 1부터 20까지 정수중 2 또는 3의 배수의 합 function sumEONumber(number) { var sum = 0; for (var i = 0; i &lt;= number; i++) { if (i % 2 === 0 || i % 3 === 0) sum += i; } console.log(sum); } sumEONumber(20); 문제 8 : 주사위 두 개를 던졌을때 눈의 합이 6이 되는 모든 경우 출력 function sumDice() { for(var i=1;i&lt;=6;i++){ for(var j=1;j&lt;=6;j++){ if( (i + j) === 6) console.log('['+i+','+j+']'); } } } sumDice(); 문제 9 : 삼각형 출력 // 방법 1 : for문 한번 사용 function showTriangle(number) { var star = ''; for (var i = 1; i &lt;= number; i++) { star += '*'; console.log(star); } } showTriangle(5); // 방법 2 : 이중 for문 사용 function showTriangle(number) { var star = ''; for (var i = 1; i &lt;= number; i++) { for (var j = 1; j &lt;= i; j++) { star += '*'; } console.log(star); } star = ''; } showTriangle(5); 10. 문제 10 : 트리 출력 // 방법 1 : 위에 9번에 있는 함수를 2번 호출하여 만든다. showTriangle(3); showTriangle(5); // 방법 2 : for문 한번 사용 function showTree(number) { var fstStar = ''; var scdStar = ''; for (var i = 1; i &lt;= number+5; i++) { fstStar += '*'; if(i &lt;= number){ console.log(fstStar); }else{ scdStar += '*'; console.log(scdStar); } } } showTree(3); // 방법 3 : 2개의 for문 사용 function showTree(number) { var star = ''; for (var i = 1; i &lt;= number; i++) { star += '*'; console.log(star); } star = ''; for (i = 1; i &lt;= number + 2; i++) { star += '*'; console.log(star); } } showTree(3);","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180130","slug":"TIL-180130","date":"2018-01-30T13:29:19.000Z","updated":"2018-01-30T14:50:15.412Z","comments":true,"path":"2018/01/30/TIL-180130/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/30/TIL-180130/","excerpt":"","text":"오늘 한 일 강의 내용 정리(Javascript Data type &amp; Variable, Javascript Operator, Javascript Control Flow) 강의 예습하기(Javascript Object, Javascript Immutability, Javascript Function) 강의 과제하기(10문제 풀기) 알고리즘 문제 1개 풀기(Diagonal Difference) 내일 할 일 지금까지 했던 Javascript 총정리 Sass 공부하고 정리하기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180130-Daily-Summary - Javascript - 변수, 자료형, 객체형, 표기법, var의 문제점, 삼항 연산자","slug":"180130-Daily-Summary","date":"2018-01-30T11:55:08.000Z","updated":"2018-01-30T13:35:07.120Z","comments":true,"path":"2018/01/30/180130-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/30/180130-Daily-Summary/","excerpt":"","text":"변수 (Variable) 값을 저장 참조하기 위해 사용하며 메모리 상의 주소를 기억하는 저장소 메모리 주소에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자 저장단위 : byte (8bit : 영문 대소문자, 숫자 특수문자를 포함할 수 있는 단위) 자료형(Data Type) 문자열, 숫자, 불리언(boolean), 객체 등 여러 종류의 데이터를 식별하는 분류 자료형이 있는 이유 : 메모리에 할당하는 크기를 정하기 위해 기본 자료형 : 변경 불가능한 값(immutable value)이며 값으로 접근(pass-by-value) Boolean null undifined Number String Symbol Boolean : true or false null : 변수가 가르키고 있는 참조를 무효화함(null은 “Null”,&quot;NULL&quot;과 다름) undifined : 아직 값이 할당되지 않아서 초기화 해놓은 곳 Number : 정수와 실수, infinite(+,-), NaN(Not-a-Number) String : 문자열 (유사배열) Symbol : 객체(key,value)명이 중복되지않은 값을 만드는 것 (ECMAScript 6에서 추가) 예) var num; // 1 num = 4; // 2 변수명 num이라는 변수를 생성하는데 값을 정의하지 않았으므로 undifined에 해당하는 메모리에 공간을 확보하고 위치를 기억 4라는 값에 대한 메모리를 새로 확보하고 num이 가르키던 undifined에서 4로 가르킴 여기서 undifined는 가르키는 포인터가 없으므로 Garbage Collector가 자동적으로 메모리에 확보되있던 공간을 삭제해줌 객체형 : 변경 가능한 값(mutable value), 참조로 접근(Pass-by-reference) Object Object : 배열, 함수, 정규표현식 등 기본자료형을 제외한 나머지들을 포함 예) var user1 = { name: 'Park', number: '13' } }; // 1 var user2 = user1; // 2 user2.name = 'John'; // 3 console.log(user1.name); // 4 console.log(user2.name); // 4 객체 user1을 생성하고 user1안에 있는 값들을 메모리안에 넣음 user1의 값을 user2에 넣는게 아니라 user2는 user1을 포인터로 가르킴 user2.name에 'John’이라는 값을 넣으면 기존의 기본자료형 방식과는 다르게 따로 공간을 생성하지 않고 user1에 있던 공간에서 덮어쓰기 형식으로 수정함 결국 user1.name과 user2.name의 값은 같은 포인터를 가르키기때문에 John 이라는 값을 출력함 기본 자료형과 객체형의 차이점 데이터를 변경할 수 없음 값으로 전달 표기법 낙타등표기법(camelcase) Ex) nameName 스네이크표기법(snakecase) Ex) name_name 케밥표기법(kebabcase) Ex) name-name 메모리 CODE DATA : 전역변수를 저장 STACK : inmutable HEAP(참조형 변수) 영역 : mutable var 키워드로 선언된 변수의 문제점 중복 선언 변수는 중복 선언이 가능 var score = 1; console.log(score); // 1 var score = 100; console.log(score); // 100 var 키워드 생략 가능 변수 선언시 var 키워드 생략 가능 변수는 전역 변수가 됨 동적 타이핑 같은 변수에 여러 data type의 값을 대입할 수 있음 변수 호이스팅(Variable Hoisting) 변수를 선언 이전에 참조 가능 Function-level scope 전역 변수의 남발 블록 구문 함수안에서의 블록 구문에만 지역변수를 인정 비교 연산자 (, =)(!=, !)의 차이 : &quot;, !=&quot;는 값만 확인하고 &quot;=, !&quot;는 값과 타입을 확인함 삼항 연산자 조건 ? 조건이 ture일때 반환할 값 : 조건이 false일때 반환할 값 2개 이상의 조건이 들어갈시 가독성 때문에 if문을 쓰는것이 좋음 var condition = true; var result = condition ? 'true' : 'false'; console.log(result); // 'true' 단축 평가 function foo (str) { str = str || ''; // do somethig with str console.log(str.length); } 매개변수 초기화 !! 피연산자를 boolean값으로 변환하는 것","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180129","slug":"TIL-180129","date":"2018-01-30T01:03:56.000Z","updated":"2018-01-30T01:05:41.818Z","comments":true,"path":"2018/01/30/TIL-180129/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/30/TIL-180129/","excerpt":"","text":"주말에 한 일 HTML / CSS 강의 내용 복습 다음주에 들어갈 Javascript 내용 예습하기 (http://poiemaweb.com/) 오늘 한 일 강의 내용 정리(Coding, Javascript Introduction, Javascript Syntax Basis) 강의 예습하기(Javascript Data type &amp; Variable, Javascript Operator, Javascript Control Flow) 내일 할 일 강의 내용 정리(Javascript Data type &amp; Variable, Javascript Operator, Javascript Control Flow) 강의 예습하기(Javascript Object, Javascript Immutability, Javascript Function)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180129-Daily-Summary - 프로그래밍 언어, http, Javascript - Syntax Basics","slug":"180129-Daily-Summary","date":"2018-01-29T13:43:22.000Z","updated":"2018-01-30T12:05:11.311Z","comments":true,"path":"2018/01/29/180129-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/29/180129-Daily-Summary/","excerpt":"","text":"프로그래밍 언어 컴퓨터와 인간의 대화에 사용되는 일종의 수단으로 컴퓨터가 모두 이해할 수 있는 약속된 형태의 인공 언어 자연어를 가지고 사람이 이해할 수 있는 레벨로 인공어를 만든 언어 Semantics(의미)와 Syntax(구문)의 조합으로 표현 컴퓨터에게 명령하는데 효율적(명확히)으로 전달하는 것 수행되어져야 하는 명령을 컴퓨터에 전달하는 일종의 커뮤니케이션 자연어 : 어떤 정돈된 완벽한 문법이나 형식적인 의미가 없는 언어 인공어 : 한 사람이나 여러 사람의 의도와 목적에 따라 만든 언어 언어 : 말로 표현할 수 있지만, 문서로도 표현할 수 있음 문제 해결 능력 프로그래밍을 정의하기 위해서는 문제 및 요구사항을 명확히 이해한 후 복잡함을 단순하게 분해해야 하는데 이때 요구되는 것이 문제 해결 능력 ※ 문제 해결 능력과 알고리즘은 절대적이지 않음 자료구조가 제일 중요함 Computational thinking 해결 과제를 명확히 하여 문제를 작은 단위로 분해하고 패턴화 하고 컴퓨터가 효율적(명확히)으로 수행할 수 있도록 답을 내는 것 문법(Syntax) 우리는 항상 컴퓨터가 이해할 수 있는 언어인 기계어로 명령을 전달해야 하지만 컴퓨터가 이해할 수 있는 문법을 사용하여 프로그램을 작성한 후 기계어로 변환하여 주는 번역기를 이용할 수 있음 번역기를 컴파일러 혹은 인터프리터라고 함 결국 프로그래밍을 학습한다는 것이 문법을 배우는 것 의미(Semantics) 문법을 기초로 하여 내가 수행하고자 하는 것 즉, 요구사항이 실현되어야함 프로그래밍에서 제공하는 것들 변수 키워드 연산자 표현식 조건문 반복문 함수 자료구조 결론 : 프로그래밍은 요구사항의 집합을 분석하여 적절한 자료구조와 함수의 집합으로 변환 후 흐름을 제어하는 것 Script란 ? 순차적으로 하나씩 실행되는 것 Javascript란 ? 브랜던 아이크가 만든 1995년에 만들었던 스크립트 언어이며 HTML, CSS와 함께 구성하는 요소로 웹브라우저에 동작하는 유일한 언어 C나 Java에서 많은 문법을 차용했고 그 이외에도 Awk, Perl,Python으로부터도 영향을 받음 인터프리터 언어이기 때문에 Compile 필요없이 HTML 안에 기술이 가능 멀티-패러다임 언어로 명령형, 함수형, 프로토타입 기반으로 객체지향 언어로서 사용 구글의 Chrome V8 Javascript 엔진으로 빌드된 Javascript 런타인 환경인 Node.js의 등장으로 서버 사이드에서 Front-end 영역은 물론 Back-end 영역까지 아우르는 웹 프로그래밍 언어로 거듭남 크로스 플랫폼을 위한 모바일 웹/앱 개발 분야에서도 가장 중요한 언어로 주목받음 SPA(Single Page Appliction) 웹 앱이 대중화되면서 Angular, React, Vue.js 등 다양한 프레임워크와 라이브러리가 확보 Javascript는 웹페이지 제작에 보조적인 역할을 할라고 만들었다. 하지만 HTML5의 등장으로 사용빈도가 늘어나고 chrome V8이 만들어지면서 javascript가 브라우저환경에서만 사용되었지만 런타임 환경인 node.js의 등장으로 서버 사이드 애플리케이션 개발에서도 사용되는 full stack 개발 언어가 되었음 Histroy 1995년 Navigator 2를 위하여 웹페이지에 포함하는 스크립트 언어로 개발되었으며 Livescript로 불리었음 1997년 ECMA-262라 불리는 명세가 완성되었으며 상표권 문제로 Livescript에서 ECMAScript로 변경 1999년 ECMAScript 3가 공개 되었음 10년뒤인 2009년 ECMAScript 5 HTML5와 함께 출현한 표준안(JSON과 Strict Mode가 추가됨) 2015년 ECMAScript 6가 공개 되었음(let, const 키워드, Arrow Function, class, Symbol 타입 등이 추가) ES3에서 ES5사이에서 ES4가 받아들이지 않으면서 ES4에 있던 기능들이 ES6에 다 적용됨 C언어와 Javascript의 동작 c언어는 운영체제가 실행하며 OS로 바로 명령함 Javascript는 OS위에서 구동하는 브라우저에서 동작하는 것 http란? 단방향 통신 HTTP 1.1V은 하나 하나 다 요청해서 정보를 받아옴 HTTP 2.0V은 한번에 정보를 요청해서 받아옴 단점 : 서버안에 기록이 없음 렌더링 엔진 (HTML, CSS) 로드 -&gt; 파싱 -&gt; DOM에 저장 -&gt; 렌더 트리로 결합 로드 -&gt; 파싱 -&gt; CSSOM에 저장 -&gt; 렌더 트리로 결함 자바스크립트 엔진 (Javascript) 로드 -&gt; 파싱 -&gt; syntax에 저장 -&gt; 렌더 트리로 결합 Javascript Syntax Basics 구문(Statement) Script가 컴퓨터에 의해 단계별로 수행될 명령들 var x = 5; 예 ) 키워드 x라는 이름으로 변수를 생성하고 그 x라는 이름에 5라는 값을 넣어라 var z = x + y; 예 ) 키워드 z라는 이름으로 변수를 생성하고 x,y라는 값을 가져와서 더한 다음 z에 넣어라 표현식 (Expression) 하나의 값으로 평가될 수 있는 구문 구문은 표현식이 될 수 없음 10 * 6 // 60 'Hi' + ' ' + 'bro' // 'Hi bro' 변수 (Variable) 변수는 위치를 기억하는 저장소이며 값을 저장, 참조하기 위해 사용 var number; // 변수의 선언과 초기화 number = 6; 예) number로 변수를 선언하고 변수 number에 6을 할당해라 값 (Value) 여기서의 값을 보통 리터널이라 부름 리터널이란 : 변수 또는 상수에 저장되는 값 자체를 의미 2000 // literal : Number 'Hi Hello' // literal : String { name: 'Park', age: '25' } // literal : Object ['Spring','Summer']; // literal : Array 키워드 수행할 동작을 규정한 것(명령어) 주석 (Comment) 작성한 코드의 의미를 설명함 주석은 없는 것이 최고 변수명 프로퍼티명을 사용할 때 의미를 담아서 쓰는 것이 좋음 //Bad //변수 x에 정수 5를 할당함 var x = 5; //good var page = 10; 참고 : http://poiemaweb.com 사이트","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"algorism","slug":"algorism","date":"2018-01-28T03:25:14.000Z","updated":"2018-01-28T03:28:49.940Z","comments":true,"path":"2018/01/28/algorism/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/28/algorism/","excerpt":"","text":"Algorism 입력값을 출력값의 형태로 바꾸기 위해 어떤 명령들이 수행되어야 하는 지에 대한 규칙들의 순서적 나열 정확한 Algorism 입력을 출력으로 바꾸기 위해 컴퓨터가 따르는 일련의 절차 일상생활 언어로도 절차적 표현 가능 효율성 Algorism 작업을 완료하기까지 얼마나 시간과 노력을 덜 들일 수 있는지에 대한 척도 2페이지를 만들것을 1페이지로 만드는 것 출처 : http://www.edwith.org/connect_cs/lecture/14110/","categories":[{"name":"Algorism","slug":"Algorism","permalink":"http://jinwoopark94.github.io/categories/Algorism/"}],"tags":[{"name":"Algorism","slug":"Algorism","permalink":"http://jinwoopark94.github.io/tags/Algorism/"}]},{"title":"TIL-180126","slug":"TIL-180126","date":"2018-01-26T13:49:13.000Z","updated":"2018-01-30T02:53:22.314Z","comments":true,"path":"2018/01/26/TIL-180126/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/26/TIL-180126/","excerpt":"","text":"오늘 한 일 강의 내용 정리 알고리즘 문제 1개 풀기(Grading Students) 내 홈페이지(jinwoopark.com) bootstrap framework 지우기 (직접 css를 작성하여 속성들의 기능들을 더 이해하기 위해) 주말에 할 일 HTML / CSS 강의 내용 복습 다음주에 들어갈 Javascript 내용 예습하기 (http://poiemaweb.com/)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180126-Daily-Summary - 반응형 웹 (Responsive Web)","slug":"180126-Daily-Summary","date":"2018-01-26T12:38:26.000Z","updated":"2018-01-26T13:55:34.193Z","comments":true,"path":"2018/01/26/180126-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/26/180126-Daily-Summary/","excerpt":"","text":"반응형 웹 데스크탑, 태블릿, 모바일에 모든 스크린 사이즈에 적절하게 보이는 웹사이트 반응형 웹 형식의 종류 Responsive Flexible Adaptive 개발 순서 Mobile first : 모바일 환경부터 태블릿 데스크탑 순서대로 작업 Desktop first : 데스크탑 환경부터 태블릿 모바일 순서대로 작업 반응형에 사용되는 단위 vw : viewport 넓이 vh : viewport 높이 vmin : viewport 최소 넓이와 높이 vmax : viewport 최대 넓이와 높이 em : 스타일을 지정한 요소의 폰트 크기를 곱한 값 rem : html 폰트의 기준의 폰트 값을 곱한 값 넓이 구하는 공식 : target / context = result Media query 각 디바이스에 맞는 스타일을 제공할 수 있는 기능 HTML &lt;link href=&quot;mobile.css&quot; rel=&quot;stylesheet&quot; media=&quot;all and (max-width:1024px)&quot;&gt; CSS /* 데스크탑 환경 */ @media all and (max-width: 1024px) { /*사용자 해상도가 1024px 이상일 때 */ } /* 태블릿 환경 */ @media all and (min-width:768px) and (max-width: 1024px) { /*사용자 해상도가 768px ~ 1024px 일 때 */ } /* 모바일 환경 */ @media all and (max-width: 468px) { /*사용자 해상도가 1024px 이상일 때 */ } @import url(mobile.css) all and (max-width:1024px){ /*사용자 해상도가 1024px 이상일 때 */ } 반응형 이미지 처리 image-test{ max-width:100%; height: auto; } 반응형 이미지 문제 이미지 크기로 인한 성능/속도 및 대역폭 고밀집도 디바이스 대응 art direction 처리 다양한 이미지 포맷 대응 벡터 형식의 이미지 SVG 구글에서 제안 WEBP 마이크로소프트 JPEG-XR FLAXPIX 해결방안 1. srcset, sizes 속성 화면 크기에 맞춰 적절한 용량 이미지를 불러옴 고밀집도 디바이스에 대응가능 &lt;img src=&quot;small.jpg&quot; srcset=&quot;large.jpg 1024w, medium.jpg 640w, small.jpg 320w&quot; sizes=&quot;(min-width: 36em) 33.3vw, 100vw&quot; alt=&quot;A rad wolf&quot;&gt; 2. picture 엘리먼트 다양한 디바이스에 맞는 이미지를 불러옴 고밀집도 디바이스에 대응가능 &lt;picture&gt; &lt;source media=&quot;(min-width: 40em)&quot; srcset=&quot;big.jpg 1x, big-hd.jpg 2x&quot;&gt; &lt;source srcset=&quot;small.jpg 1x, small-hd.jpg 2x&quot;&gt; &lt;img src=&quot;fallback.jpg&quot; alt=&quot;&quot;&gt; &lt;/picture&gt; 책 추천 [도서] 만들면서 배우는 모던 웹사이트 디자인 : 웹 디자인을 위한 모던 테크닉 새창 참고자료 : processing-images-on-responsive-web","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180125","slug":"TIL-180125","date":"2018-01-25T13:48:48.000Z","updated":"2018-01-25T13:57:03.861Z","comments":true,"path":"2018/01/25/TIL-180125/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/25/TIL-180125/","excerpt":"","text":"오늘 한 일 강의 내용 정리 알고리즘 강의 듣기 알고리즘 문제 1개 풀기(A Very Big Sum) 내일 할 일 강의 내용 정리 알고리즘 문제 1개 풀기(Grading Students) 내 홈페이지(jinwoopark.com) bootstrap framework 지우기 (직접 css를 작성하여 속성들의 기능들을 더 이해하기 위해) 한 주간의 강의 내용 복습","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180125-Daily-Summary - [HTML - blockquote와 q 태그, address 태그], [CSS - counter 속성, grid 속성]","slug":"180125-Daily-Summary","date":"2018-01-25T13:32:04.000Z","updated":"2018-01-25T13:46:00.726Z","comments":true,"path":"2018/01/25/180125-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/25/180125-Daily-Summary/","excerpt":"","text":"HTML - blockquote와 q 태그 인용문을 표현하기 위해 사용하는 태그 blockquote 태그 주로 긴 인용문에 사용되며 출처 표시 block 형식 &lt;blockquote cite=&quot;(출처 url)&quot;&gt; &lt;p&gt;blockquote 테스트&lt;/p&gt; &lt;/blockquote&gt; cite 속성을 이용하여 출처 표시 가능 q 태그 주로 짧은 인용문에 사용되며 출처 표시 inline 형식 자동으로 태그안에 before, after content로 &quot; &quot; 큰 따옴표가 넣어짐 &lt;q cite=&quot;(출처 url)&quot;&gt; &lt;p&gt;q 테스트&lt;/p&gt; &lt;/q&gt; cite 속성을 이용하여 출처 표시 가능 HTML - address 태그 주소, 연락처, 메일, 저작권 등 정보를 위한 태그 address안에 글꼴은 defalut 값으로 이탤릭체 &lt;address&gt; &lt;span&gt;서울시 서초구&lt;/span&gt; &lt;span&gt;전화: &lt;a href=&quot;tel:02-1234-5678&quot;&gt;02-1234-5678&lt;/a&gt;&lt;/span&gt; &lt;span&gt;E-MAIL: &lt;a href=&quot;mailto:wlsdntus2@naver.com&quot;&gt;wlsdntus2@naver.com&lt;/a&gt;&lt;/span&gt; &lt;span&gt;Copyright by JinwooPark&lt;/span&gt; &lt;/address&gt; 위의 a 태그 주소에서 tel과 mailto를 사용하면 모바일 환경에서 클릭시 자동으로 전화를 바로 거는 기능이나 메일 주소로 바로 연결하여 메일 전송이 가능 CSS - counter 속성 CSS를 기반하여 어떠한 값을 증가시키거나 감소시킬때 사용하는 속성 .counter-test li{ counter-reset: number; /* number를 초기화시킴*/ counter-increment: number; /* number에 1씩 증가시킴*/ } .counter-test li::before{ content: counter(number); /* 값을 1씩 증가시켜서 표시*/ } counter-reset : 속성값 초기화 (css counter를 사용할려면 초기화가 필요함) counter-increment : 값을 증가시킴 counter : counter는 counter(이름)과 counters(이름, 스타일)을 사용할 수 있음 counter나 counters 함수를 사용할때에는 기본 defalut 값으로 decimal으로 설정되어 있음 Grid Layout 페이지를 구조적으로 나누어 다양한 레이아웃을 구현하는 것 Grid Layout 구현하는 방식 table 방식 float 방식 flex 방식 grid 방식 CSS - grid 속성 2차원 grid 기반이며 열과 행의 라인을 기준으로 gird 설정을 하여 layout 구현 grid container 설정 grid container를 설정을 하면 그 아래 있는 모든 자식 요소는 그리드 아이템 display: grid / inline-grid &lt;div class=&quot;gird-test-div&quot;&gt; &lt;div&gt;영역1&lt;/div&gt; &lt;div&gt;영역2&lt;/div&gt; &lt;div&gt;영역3&lt;/div&gt; &lt;div&gt;영역4&lt;/div&gt; &lt;div&gt;영역5&lt;/div&gt; &lt;div&gt;영역6&lt;/div&gt; &lt;div&gt;영역7&lt;/div&gt; &lt;div&gt;영역8&lt;/div&gt; &lt;div&gt;영역9&lt;/div&gt; &lt;/div&gt; .gird-test-div{ display: grid / inline-grid; } grid 열과 행 크기 설정 grid의 열과 행의 크기를 각각 설정 가능 grid-template-columns, grid-template-rows &lt;div class=&quot;gird-test-div&quot;&gt; &lt;div&gt;영역1&lt;/div&gt; &lt;div&gt;영역2&lt;/div&gt; &lt;div&gt;영역3&lt;/div&gt; &lt;div&gt;영역4&lt;/div&gt; &lt;div&gt;영역5&lt;/div&gt; &lt;div&gt;영역6&lt;/div&gt; &lt;div&gt;영역7&lt;/div&gt; &lt;div&gt;영역8&lt;/div&gt; &lt;div&gt;영역9&lt;/div&gt; &lt;/div&gt; .gird-test-div{ display: grid; /* 200px 200px로 나누고 나머지 공간을 하나의 column으로 나눔*/ grid-template-columns: 200px 200px 1fr; grid-template-rows: 2fr 2fr 1fr; } fr란? : 컨테이너에 남아 있는 공간의 일정 비율을 나타냄 만약 grid-template-columns값을 1fr 1fr 1fr로 바꾼 후 실행하면 컨테이너 열 크기에 맞게 3개의 크기가 같은 공간을 생성 grid 반복되는 구간 설정 grid 설정 중 repeat()를 통해 반복되는 부분을 쉽게 처리 가능 repeat() .gird-test-div{ display: grid; /* repeat 적용 전*/ grid-template-columns: 1fr 1fr 1fr; /* repeat 적용 후*/ grid-template-columns: repeat(3, 1fr); } grid 라인을 이용한 아이템 설정 grid에서 라인을 기준으로 아이템을 설정하는데 라인은 아래와 그림과 같이 시작하며 명령어는 아래와 같음 grid-column-start, grid-column-end, grid-row-start, grid-row-end .gird-test-div{ grid-column-start: 1; /* 열 Line 1부터 시작 */ grid-column-end: 4; /*열 Line 4까지 */ grid-row-start: 1; /* 행 Line 1부터 시작*/ grid-row-end: 3; /* 행 Line 3까지*/ } 간편하게 아래와 같이 합쳐서 사용 가능하다. (※ 처음 사용시 헷갈림 주의) .gird-test-div{ /* row-start / column-start / row-end / column-end */ grid-area : 1 / 1 / 3 / 4 } 참고 : w3schools -&gt; https://www.w3schools.com/css/css_grid_item.asp","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"git - branch","slug":"git-branch","date":"2018-01-24T12:18:49.000Z","updated":"2018-01-24T12:47:00.647Z","comments":true,"path":"2018/01/24/git-branch/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/24/git-branch/","excerpt":"","text":"branch란? 여러 개발자들이 동시에 다양한 작업을 할 수 있게 만들어 주는 기능(나무 가지를 표현) branch의 구조 git branch 이전의 버전관리 시스템 같은 경우 위험하고 어렵고 용량을 많이 차지했다면 Git branch는 가볍고 편리하며 사용자가 사용할만한 상태까지 끌어 올린 혁신적인 버전관리 시스템 git branch 명령어 branch 목록보기 git branch branch 생성하기 git branch &quot;새로운 브랜치 이름&quot; branch 삭제하기 git branch -d &quot;삭제할 브랜치 이름&quot; branch 강제 삭제하기 git branch -D &quot;삭제할 브랜치 이름&quot; 다른 branch로 전환하기 git checkout &quot;전환하려는 브랜치 이름&quot; branch 생성하고 전환하기 git checkout -b &quot;생성하고 전환할 브랜치 이름&quot; branch를 검색해서 생성할려는 branch가 없다면 branch를 새로 만들고 만든 branch로 전환 이 과정은 생활코딩-지옥에서 온 git 수업을 듣고 정리한 내용입니다.","categories":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/tags/git/"}]},{"title":"TIL-180124","slug":"TIL-180124","date":"2018-01-24T12:07:07.000Z","updated":"2018-01-25T13:51:53.449Z","comments":true,"path":"2018/01/24/TIL-180124/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/24/TIL-180124/","excerpt":"","text":"오늘 한 일 강의 내용 정리 생활코딩 git의 혁신 - branch 정리 알고리즘 문제 1개 풀기(Compare the Triplets) 내일 할 일 강의 내용 정리 생활코딩 git의 혁신 - branch 추가 정리 알고리즘 강의 듣기 알고리즘 문제 1개 풀기(A Very Big Sum) 오늘 알게된점 Sprite 기법은 여러가지 버튼 이미지나 글자 이미지 등 비슷한 분류의 이미지들을 한 이미지에 저장해 페이지 렌더링 속도가 빠르고(이유 : 이미지들 여러개 불러오는 것보다 하나의 이미지만 불러옴) 이미지를 동일한 간격으로 배치하기 때문에 쉽게 적용 가능하다는 점을 알게 되었다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180124-Daily-Summary - [IR 기법, Sprite 기법], [HTML strong, em과 b,i 구분], [CSS box-sizing, vertical-align]","slug":"180124-Daily-Summary","date":"2018-01-24T11:04:12.000Z","updated":"2018-01-24T12:17:18.976Z","comments":true,"path":"2018/01/24/180124-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/24/180124-Daily-Summary/","excerpt":"","text":"IR(Image Replacement) 기법 이미지를 볼 수 없는 사용자에게 대체된 텍스트를 제공하는 것 (스크린리더 사용자를 위한 기법) 올바른 IR기법 1. Text-indent &lt;style&gt; .textindent_test{ text-indent:-9999px; } &lt;/style&gt; &lt;span class=&quot;textindent_test&quot;&gt; text-indent IR 기법 &lt;/span&gt; Text-indent 속성은 적용된 요소가 많을 때 컴퓨터가 웹 페이지 로드 시 위치값을 적용된 개수 만큼 계산해야 하므로 성능에 저하가 올 수 있음. 2. overflow:hidden &lt;style&gt; .visible_test{ position:absolute; left:9999px; width:1px; height:1px; overflow:hidden; } &lt;/style&gt; &lt;div class=&quot;overflow_test&quot;&gt; overflow:hidden IR 기법 &lt;/div&gt; 원리는 text-indent랑 유사함 3. z-index를 활용한 설정 이미지의 대체 텍스트에 z-index 속성 값을 음의 정수로 부여하는 방식 .z-index_test{ position:relative; z-index:-1; } z-index_test IR 기법 CSS가 정상적으로 로드되지 않을 때 숨겨진 텍스트가 화면에 출력 4. 높이와 넓이를 0으로 설정 대체 텍스트 글자가 들어가는 요소의 높이와 너비를 0으로 지정하는 방법 잘못 된 IR 기법 스크린 리더가 적용된 요소를 무시하고 모두 출력하여 사용자가 현재 화면에서 어떤 컨텐츠가 표시되는 것인지 구별 불가 1. visible:hidden &lt;style&gt; .visible_test{ position:absolute; left:9999px; width:1px; height:1px; visible:hidden; } &lt;/style&gt; &lt;div class=&quot;visible_test&quot;&gt; visible:hidden IR 기법 &lt;/div&gt; 2. display:none &lt;style&gt; .display_test{ display:none; } &lt;/style&gt; &lt;div class=&quot;display_test&quot;&gt; display:none IR 기법 &lt;/div&gt; Sprite 기법 다량수의 이미지를 하나의 이미지로 묶고 CSS를 이용해 이미지들 마다 position 위치를 이동시켜서 특정 이미지가 보이도록 하는 기법 장점 가볍다 : 일정 간격으로 여러가지 이미지들을 하나로 만들기 때문에 이미지 파일을 여러개를 불러올 필요없이 하나의 이미지만 불러오면 됨 편리함 : 여러개의 이미지가 여러 곳에 분산되어 있으면 이미지를 관리하기가 불편한데 비슷한 분류의 이미지를 동일한 간격으로 배치하기 때문에 쉽게 적용 가능 단점 웹페이지에 이미지를 추가/제거할때 Sprite 이미지도 같이 추가/제거를 해야함 이미지를 올리면 자동으로 position 값을 보여주는 사이트 https://spritegen.website-performance.org/ HTML strong, em과 b,i 구분 strong, em과 b,i 공통점 브라우저에서 태그 사용시 굵은 글씨와 이탤릭체로 표시함 strong, em과 b,i 차이점 strong, em 같은 경우에는 각각 굵은 글씨, 이텔릭체로 표시하는데 음성으로 읽을 경우 볼륨이나 톤을 변경하여 읽어주지만 b,i 같은 경우에는 웹 브라우저에서만 굵은 글씨, 이텔릭체로 표시 결국 b,i 태그는 강조되는 것처럼 보일 수 있지만 실제로 웹에서 음성으로 인식할때 일반 구조로 태그로 인식함 CSS box-sizing 요소의 너비와 높이를 계산하는 데 사용되는 기본적인 CSS model 대체하기 위해 사용 .box-test{ box-sizing: content-box / padding-box / border-box; } content-box 속성 css에 기본 정의된 defualt 값이며 width나 height를 측정할 때 padding, border, margin을 포함하지 않음 padding-box 속성 width나 height를 측정할 때 border, margin을 포함하지 않음 border-box 속성 width나 height를 측정할 때 margin을 포함하지 않음 CSS vertical-align inline 또는 table-cell box에서 수직 정렬을 지정 .vertical-test{ vertical-align: top / middle / bottom; } top 속성 셀을 top으로 정렬 middle 속성 셀을 중앙으로 정렬 bottom 속성 셀을 bottom으로 정렬","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180123","slug":"TIL-180123","date":"2018-01-23T11:33:06.000Z","updated":"2018-01-25T13:50:20.898Z","comments":true,"path":"2018/01/23/TIL-180123/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/23/TIL-180123/","excerpt":"","text":"오늘 한 일 강의 내용 정리 생활코딩 git의 혁신 - branch 듣기 알고리즘 문제 1개 풀기(Simple Array Sum) position에 대한 정확한 원리 이해 내일 할 일 강의 내용 정리 생활코딩 git의 혁신 - branch 정리 알고리즘 문제 1개 풀기(Compare the Triplets) 오늘 알게된점 position에 대해 잘못된 지식을 가지고 있었는데 오늘 정확히 알게 되었다. position에 fixed나 absolute 값을 주게되면 그 위에 부모의 기준에 따라 위치가 정해지는데 부모를 못 찾게 되면 결국 body 태그까지 가게 되는데 그 부모역할을 position: relative 값을 주면 가능해진다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180123-Daily-Summary - HTML 블럭, 인라인, time 요소, 웹 접근성 WAI-ARIA","slug":"180123-Daily-Summary","date":"2018-01-23T11:25:02.000Z","updated":"2018-01-24T00:59:47.311Z","comments":true,"path":"2018/01/23/180123-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/23/180123-Daily-Summary/","excerpt":"","text":"HTML 블럭 요소, 인라인 요소 블럭 요소 화면의 가로폭 전체를 차지하는 직사각형 모양 p 요소 h1 요소 blockquote 요소 ul 요소와 ol 요소 li 요소 div 요소 인라인 요소 블럭 요소 혹은 다른 인라인 요소 안에만 쓰일 수 있으며 CSS를 통해 스타일을 변경하지 않았다면 기본적으로 문장이 흐르듯 흐는 모양 a 요소 strong 요소 em 요소 span 요소 인라인 요소는 블록 요소 안에 담겨있어야 하고 여러 인라인 요소가 서로 중첩될 수 있음 HTML5 time 요소 기계가 이해할 수 있는 형태로 날짜나 시간을 나타내줌 예제1) &lt;p&gt;강의 시작은 &lt;time&gt;20:00&lt;/time&gt;입니다.&lt;/p&gt; 예제2) &lt;p&gt;강의 시작은 &lt;time datetime=&quot;2018-01-23 20:00&quot;&gt;1월 23일&lt;/time&gt; 입니다..&lt;/p&gt; WAI-ARIA(Web Accessibility Initiative Accessible Rich Internet Applications) - 웹 접근성 웹 사이트/애플리케이션에 접근성을 제공할 수 있도록 하는 표준 브라우저 지원 현황 우리나라에서 쓰기에는 Internet Explorer 버전 문제 때문에 아직 무리가 있음 ARIA의 3가지 기능 역할 특정 요소에 기능을 정의 역할을 부여하여 사용자에게 정보 제공 부여된 역할은 동적으로 변경할 수 없음 추상 역할, 위젯 역할, 랜드마크 역할, 문서 구조 속성 &amp; 상태 요소가 기본적으로 갖고 있는 특징이나 상황 속성과 상태는 “aria-*” 접두어를 가짐 상태는 요소의 상황을 나타내므로 애플리케이션이 실행 중에 자주 바뀌는 반면, 속성은 상대적으로 바뀌는 경우가 드뭄 위젯 속성, 라이브 영역 속성, 드래그 엔 드롭 속성, 관계 속성 NIA 한국 정보화진흥원 WAI-ARIA 자료 참고","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180122","slug":"TIL-180122","date":"2018-01-22T13:35:22.000Z","updated":"2018-01-22T13:49:20.685Z","comments":true,"path":"2018/01/22/TIL-180122/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/22/TIL-180122/","excerpt":"","text":"오늘 한 일 강의 내용 정리 개인 홈페이지(jinwoopark.com) Bootstrap css framework 적용하기 개인 홈페이지(jinwoopark.com) google api 넣기 css nth-child 복습 내일 할 일 강의 내용 정리 개인 홈페이지(jinwoopark.com) EDUCATION 부분 정보 넣고 css 적용하기 생활코딩 git의 혁신 - branch 듣기 알고리즘 문제 1개 풀기 오늘 알게된점 css nth-child을 예제에서 직접 사용해 보았다. 정확히 정리하면 nth-child(2n+1)에서 2n+1은 2개 중에 1번째로 css 속성값을 주는 것이고 만약 경우의 수가 6개라고 하면 nth-child(6n+1), nth-child(6n+2), nth-child(6n+3) … 이런식으로 하나씩 스타일을 주면 된다. 그리고 nth-child(old)에서 &quot;old&quot;는 첫번째 스타일(홀수), nth-child(even)에서 &quot;even&quot;는 두번째 스타일(짝수)이다. html 태그 중에 dl, dt, dd 태그에서 dl 안에 div 태그를 쓰고 싶다면 dt와 dd를 감싸놓은 상태로 사용해야 한다는 새로운 사실을 알았다. (dl은 용어를 설명하는 목록에 만들때 사용)","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180122-Daily-Summary- HTML dl, dt, dd / CSS background","slug":"180122-Daily-Summary","date":"2018-01-22T09:14:45.000Z","updated":"2018-01-22T09:16:17.599Z","comments":true,"path":"2018/01/22/180122-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/22/180122-Daily-Summary/","excerpt":"","text":"HTML5 dl, dt, dd 태그 dl(definition list) 태그 용어를 설명하는 목록을 만들때 사용 dt 태그(definition term) 용어의 제목을 넣을때 사용 dd 태그(definition description) 용어를 설명하는데 사용 &lt;dl&gt; &lt;!-- 용어 설명하는 목록 --&gt; &lt;dt&gt;용어의 제목&lt;/dt&gt; &lt;dd&gt;용어의 설명&lt;/dd&gt; &lt;/dl&gt; 중요!! dl 태그 안에 div 태그를 쓰고 싶다면 dt와 dd를 감싸놓은 상태로 사용해야한다. div는 dt, dd은 형제 노드 관계로 dt나 dd 안에 사용할 수 없다. &lt;dl&gt; &lt;div&gt; &lt;dt&gt;test&lt;/dt&gt; &lt;dd&gt;dl&lt;/dd&gt; &lt;/div&gt; &lt;/dl&gt; CSS background 속성 background-image 배경에 이미지를 넣는 속성 .css-background-test{ background-image: url(&quot;이미지 경로&quot;); } background-repeat 배경 이미지를 반복 설정 하는 속성 .css-background-test{ background-repeat: no-repeat / repeat / repeat-x / repeat-y } no-repeat : 반복하지 않음 repeat : 반복(기본값) repeat-x : x축 기준으로 반복 repeat-y : y축 기준으로 반복 background-attachment 배경 이미지를 고정시키거나 스크롤 할때 움직이게 할 수 있는 속성 .css-background-test{ background-attachment: scroll (기본값) / fixed; } scroll : 스크롤바가 움직일때 배경도 움직임(기본값) fix : 스크롤바가 움직여도 배경은 고정 background-size 배경 이미지를 고정시키거나 스크롤 할때 움직이게 할 수 있는 속성 .css-background-test{ background-size: auto (기본값) / 100px 100px; } auto : 기본 크기(기본값) 00px 00px : 가로 세로 크기 background-position 배경 이미지의 위치를 조절할 수 있는 속성 .css-background-test{ background-position: left top / 100px 100px; } left top : 왼쪽 상단에 위치 00px 00px : 가로 세로 위치 background-color 배경에 색깔을 넣는 속성 .css-background-test{ background-color: #fff / red / rgb(0,0,0); } background 배경 관련 속성들을 한꺼번에 표현하는 속성 .css-background-test{ background: url('./jinwoo.png') no-repeat left top fixed; }","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180119","slug":"TIL-180119","date":"2018-01-19T09:48:12.000Z","updated":"2018-01-20T09:52:10.313Z","comments":true,"path":"2018/01/19/TIL-180119/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/19/TIL-180119/","excerpt":"","text":"오늘 한 일 강의 내용 정리 개인 홈페이지(jinwoopark.com) codeigniter 설치 주말에 할 일 개인 홈페이지 관련하여 벤치마킹 해보고 페이지 구상 해보기 개인 홈페이지(jinwoopark.com) 마크업 해보기 개인 홈페이지(jinwoopark.com) 내 스타일대로 Header 적용해보기 한 주간 강의 내용 정리하기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180119-Daily-Summary - HTML form, CSS animation","slug":"180119-Daily-Summary","date":"2018-01-19T09:44:56.000Z","updated":"2018-01-20T10:02:35.576Z","comments":true,"path":"2018/01/19/180119-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/19/180119-Daily-Summary/","excerpt":"","text":"HTML form 요소 공식적으로 폼을 정의하는 요소로 이 요소의 속성으로 폼의 작동하는 방식을 정의 &lt;form&gt; &lt;fieldset&gt; &lt;legend&gt;form Test&lt;/legend&gt; &lt;p&gt; &lt;input type=&quot;radio&quot; name=&quot;number&quot; id=&quot;number_1&quot; value=&quot;one&quot; /&gt; &lt;label for=&quot;number_1&quot;&gt;one&lt;/label&gt; &lt;/p&gt; &lt;p&gt; &lt;input type=&quot;radio&quot; name=&quot;number&quot; id=&quot;number_2&quot; value=&quot;two&quot; /&gt; &lt;label for=&quot;number_2&quot;&gt;two&lt;/label&gt; &lt;/p&gt; &lt;p&gt; &lt;input type=&quot;radio&quot; name=&quot;number&quot; id=&quot;number_3&quot; value=&quot;three&quot; /&gt; &lt;label for=&quot;number_3&quot;&gt;three&lt;/label&gt; &lt;/p&gt; &lt;/fieldset&gt; &lt;/form&gt; 1. fieldset 같은 목적을 가진 위젯들을 편리하게 그룹화 하는 방법 2. legend 공식적으로 “fieldset” 요소를 설명하는데 사용 3. label HTML 폼 위젯을 정의하는 공식적인 방법 (접근성 있는 폼을 만드는데 가장 중요한 요소) Animation 애니메이션 및 시나리오 설계 1. 애니메이션 이름 : animation-test 2. 텍스트 이동효과 (왼쪽상단 &gt; 오른쪽 하단 / 속도조절 / 1회 / 시작점-종료점) 3. 글자크기 변화 (font-size) 4. 투명도 (color-rgba) opacity- 상자투명도 : Transform :translate(x y) scale() skew() rotate() - 2D 함수 @keyframes CSS 문법 중 하나로 애니메이션이 만들어지는 부분 @keyframes testAnimation{ /* keyframes 이름은 testAnimation으로 지정*/ 0% { /* 스테이지 설정 0% (from과 같음) */ opacity: 1; } 100% { /* 스테이지 설정 0% (to와 같음) */ opacity: 0; } } animation 위치, 크기, 색 및 불투명도를 변경하고 회전, 크기 조정, 변환 등을 진행하면서 요소에 애니메이션 효과를 설정 animation-name @keyframes 이름을 설정 .animation-test { animation-name : testAnimation; } animation-duration timeframe 길이 (애니메이션 시작부터 마지막까지 총 지속시간) .animation-test { animation-duration : 4s; } animation-timing-function 애니메이션 속도 조절 .animation-test { animation-duration : linear; } linear : 처음부터 끝까지 부드럽게(기본값) ease : 등속운동 ease-in : 처음을 느리게 ease-out : 마지막을 느리게 ease-in-out : 처음과 마지막을 느리게 animation-iteration-count 애니메이션 반복 횟수 .animation-test { animation-iteration-count : infinite; } animation-direction 애니메이션 루프 방향 (정방향, 역방향, 번갈아가며 반복할지를 설정) .animation-test { animation-direction : normal; } normal : 정방향으로 재생 reverse : 역방향으로 재생 alternate : 매 사이클마다 각 주기의 방향을 뒤집으며 첫 번째 반복은 정방향으로 재생 alternate-reverse : 매 사이클마다 각 주기의 방향을 뒤집으며 첫 번째 반복은 정방향으로 재생 animation-fill-mode 애니메이션 시작/끝 .animation-test { animation-direction : normal; } none : 애니메이션은 실행되지 않을 때 대상에 스타일을 적용하지 않음 forwards : 대상은 실행 된 애니메이션의 마지막 keyframe에 의해 설정된 계산 된 값 backwards : 애니메이션은 대상에 적용되는 즉시 첫 번째 관련 keyframe 에 정의 된 값을 적용하고 animation-delay 기간 동안 이 값 both : 애니메이션은 앞뒤 양쪽 모두의 규칙을 따르므로 애니메이션 속성이 양방향 여러가지 animation .animation-test { animation: testAnimation 4s 1s infinite linear alternate; } 입력순서 name &gt; duration &gt; timing-function &gt; delay &gt; count &gt; direction &gt; fill-mode &gt; play-state &gt; 이름 &gt; 실행속도 &gt; 속도곡선타입 &gt; 딜레이시간 &gt; 반복횟수 &gt; 진행방향 &gt; 끝난후위치 &gt; 실행or정지","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180118","slug":"TIL-180118","date":"2018-01-18T14:29:43.000Z","updated":"2018-01-19T02:29:28.099Z","comments":true,"path":"2018/01/18/TIL-180118/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/18/TIL-180118/","excerpt":"","text":"오늘 한 일 강의 내용 정리 Git 원리에 대해 정리하기 HTML5 중요한 태그들을 의미별로 알아보기 CSS position에 대해 정리하기 blog 총 방문수, 댓글 기능 넣기 내일 할 일 강의 내용 정리 jinwoopark.com codeigniter 설치 한 주간 강의 내용 정리하기","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"180118-Daily-Summary - html lang, viewport, X-UA-Compatible, float, clear, white-space","slug":"180118-Daily-Summary","date":"2018-01-18T13:34:03.000Z","updated":"2018-01-18T13:35:50.476Z","comments":true,"path":"2018/01/18/180118-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/18/180118-Daily-Summary/","excerpt":"","text":"html lang 속성 &lt;html lang=&quot;ko&quot;&gt; lang 속성에 명시된 값을 통해 스크린 리더가 인식 시각장애인을 위한 보조공학 (웹 접근성) viewport 값 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; meta 장치의 화면 너비를 따르도록 페이지 폭을 설정 content=&quot;width=device-width&quot; 페이지가 브라우저에 의해 처음로드 될 때 초기 확대 / 축소 레벨을 설정 content=&quot;initial-scale=1.0&quot; 페이지의 크기와 스케일링을 제어하는 방법에 브라우저 지침 X-UA-Compatible &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; IE 웹 브라우저에서 해당 웹 문서를 읽을 때 자동으로 호환성 보기 기능이 활성화 IE=5 : 관용모드(quirks mode)로 지정된 DOCTYPE에 상관없이 IE5 렌더링 방식이 사용됩니다. IE=7 : IE7 표준모드로 지정된 DOCTYPE에 상관없이 IE7 표준 모드 렌더링 방식이 사용됩니다. IE=EmulateIE7 : IE7 에뮬레이션 모드로 지정된 DOCTYPE에 따라 IE7 표준모드나 관용모드로 렌더링됩니다. IE=8 : IE8 표준모드로 지정된 DOCTYPE에 상관없이 IE8 표준모드로 렌더링됩니다 . IE=EmulateIE8 : IE8 에뮬레이션 모드로 지정된 DOCTYPE에 따라 IE8 표준모드나 관용모드로 렌더링됩니다. IE=edge : 최신모드로 지정된 DOCTYPE에 상관없이 IE8 이상 버전에서 항상 최신 표준 모드로 렌더링됩니다. span 특별한 기능을 갖고있지 않고 display 속성이 block이 아닌, inline이 inline 상자 &lt;span&gt;span 내용&lt;/span&gt; float 텍스트 및 인라인(inline) 요소가 그 주위를 감싸는 자기 컨테이너의 좌우측을 따라 배치되어야 함 div { float:right; } left 요소가 자신의 포함 블록의 좌측에 부동(float, 떠움직여)해야 함을 나타내는 키워드 right 는 요소가 자신의 포함 블록의 우측에 부동해야 함을 나타내는 키워드 none 요소가 부동하지 않아야 함을 나타내는 키워드 inline-start 는 요소가 자신의 포함 블록의 시작쪽에 부동해야 함을 나타내는 키워드 즉, ltr(left to right) 스크립트 상에서 왼쪽 그리고 rtl(right to left) 스크립트 상에서는 오른쪽. inline-end 는 요소가 자신의 포함 블록의 끝쪽에 부동해야 함을 나타내는 키워드입니다. 즉, ltr 스크립트 상에서 오른쪽 그리고 rtl 스크립트 상에서는 왼쪽. clear 부동 요소의 어느면에 부동 요소가 허용되지 않는지 지정 (inline 상자에서만 사용 가능) img { float: left; } p.clear { clear: both; } none 요소가 지난 부동 요소를 해제하기 위해 아래로 이동되지 않음을 나타내는 키워드 left 요소가 지난 left 부동체를 해제하기 위해 아래로 이동됨을 나타내는 키워드 right 요소가 지난 right 부동체를 해제하기 위해 아래로 이동됨을 나타내는 키워드 both 요소가 지난 both left 및 right 부동체를 해제하기 위해 아래로 이동됨을 나타내는 키워드 inline-start 요소가 포함 블록의 시작 쪽 부동체를 해제하기 위해 아래로 이동됨을 나타내는 키워드입니다, 즉 ltr 스크립트의 left 부동체 및 rtl 스크립트의 right 부동체. inline-end 요소가 포함 블록의 끝 쪽 부동체를 해제하기 위해 아래로 이동됨을 나타내는 키워드입니다, 즉 ltr 스크립트의 right 부동체 및 rtl 스크립트의 left 부동체 white-space 어떤 요소(element) 안의 공백(whitespace)이 어떻게 처리될지를 나타내는데 사용 p{ white-space: normal; } normal 연속된 공백이 하나로 병합되며 소스 안의 줄바꿈 문자는 다른 공백 문자와 같이 취급. 줄 박스를 채우기 위해 필요에 따라 줄을 끊음 nowrap normal 과 같이 공백 문자를 병합하지만, 텍스트 줄바꿈을 하지 않음 pre 연속된 공백이 보존. 줄은 오로지 소스의 줄바꿈 문자나 요소에서만 끊어짐 pre-wrap 연속된 공백이 보존. 줄은 줄바꿈 문자, 그리고 줄 박스를 채우기 위해 필요에 따라 끊어짐 pre-line 연속된 공백이 병합. 줄은 줄바꿈 문자, 그리고 줄 박스를 채우기 위해 필요에 따라 끊어짐","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"git - git의 원리(gitstory, add, objects)","slug":"git-intro2","date":"2018-01-18T12:37:47.000Z","updated":"2018-01-18T12:54:32.155Z","comments":true,"path":"2018/01/18/git-intro2/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/18/git-intro2/","excerpt":"","text":"원리를 배우는 이유 습득력이 안 배웠을때보다 더 빠르고 오래감 기억에 오래 남으며 응용을 통해 새로운 것을 창조할 수 있음 Git에 대한 많은 영감을 얻을 수 있음 gitstory git 원리-분석 도구 설치 방법 pip install gistory git add의 원리 1. git에서 &quot;git add&quot;를 하면 눈에는 보이지 않지만 index파일이 변경되며 Object폴더에 새로운 파일이 추가됨 2. index파일에 새로운 버전을 가진 해쉬태그를 참조하는 파일명이 새롭게 갱신이 되며, 오브젝트폴더에 add한 파일이 해쉬값의 파일명으로 저장 git은 어떠한 파일을 저장할때 파일의 이름이 달라도 파일의 내용이 같으면 똑같은 파일을 새로 만들지 않고 해당 파일을 참조시킴 중요 : git은 기존의 버전관리 시스템과 다르게 아주 효율적인 구조를 가지고 있다. git은 데이터를 스냅샷으로 취급되기때문에 중복될 일이 없어 대형프로젝트에 도입하면 크기가 매우 줄어듬 objects명의 원리 1. git은 수많은 버전들은 파일명, 만들어진 날짜순으로 보관하는게 아니라 sha-1이라고 부르는 특정 해쉬 알고리즘을 통과한 값을 기준으로 저장 알고리즘은 회원가입 시스템을 구비하고있는 사이트 관리자가 사용자의 개인정보를 md5를 통과시킨 해쉬값으로 저장하고 있는것과 비슷한 원리","categories":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/tags/git/"}]},{"title":"TIL-180117","slug":"TIL-180117","date":"2018-01-17T11:51:54.000Z","updated":"2018-01-17T12:19:11.322Z","comments":true,"path":"2018/01/17/TIL-180117/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/17/TIL-180117/","excerpt":"","text":"오늘 한 일 Git에 대한 원리에 대해 생활코딩 강의 듣기 하루 들었던 강의 내용 정리 flexbox 관련하여 정리해서 블로그에 올리기 웹 접근성(인식의 용이성, 운용의 용이성, 이해의 용이성, 견고성)에 대해 알아보기 내일 할 일 강의 내용 정리 Git 원리에 대해 정리하기 HTML5 중요한 태그들을 의미별로 알아보기 (언제 정확히 쓰이는지) CSS position에 대해 정리하기 웹 트렌드(2017)에 대해 알아보기 오늘 느낀 것 html img 태그에서 alt의 역할을 정확히 알았다. 단순히 웹 페이지에서 이미지 경로가 맞지 않을때 보여지는 정보로 알고 사용하고 있었는데 확인해 보니 장애를 가지신 분들이 이미지를 못 볼때 정보를 얻을 수 있게 하기 위해 넣는 것이다. 결국 웹 접근성에 포함된다. css font-family에서 sans-serif와 serif의 차이를 알 수 있었다. sans-serif는 한국폰트로 치면 명조체, serif는 고딕체라고 생각하면 된다. 현재 serif보다 sans-serif를 많이 사용하는데 이유는 모바일 사용자가 많아 지고 있는 시점에 sans-serif가 모바일에서 sarif보다 가독성이 더 좋다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"CSS - Flex (display, flex-wrap, justify-content, align-items, align-contents)","slug":"css-flex","date":"2018-01-17T11:33:49.000Z","updated":"2018-01-17T12:28:58.114Z","comments":true,"path":"2018/01/17/css-flex/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/17/css-flex/","excerpt":"","text":"Flexbox flex의 유연성을 뜻하며 요소들을 자유자제로 위치시키는 뜻입니다. 새롭게 CSS3 명세에 반영된 레이아웃 모듈이며, 요소들이 수용된 공간을 어떻게 효과적으로 채워나갈지에 대해 고민하다가 만들어진 새로운 레이아웃 방식 Flex Container - 부모 display 그릇에 해당하는 부모 요소 (display: flex 혹은 display: inline-flex로 선언) .flex-container { display: flex } flex-direction 컨테이너 안에 위치하는 자식 요소에 어떤 방향성을 줄 것인지 결정 .flex-container { display: flex; flex-direction: row; } row : 기본 값. 아이템이 수평방향(행)으로 흐르며, 방향성은 좌에서 우 row-reverse : 아이템이 수평방향(행)으로 흐르며, 방향성은 우에서 좌 column : 아이템이 수직방향(열)으로 흐르며, 방향성은 상에서 하 column-reverse : 아이템이 수직방향(행)으로 흐르며, 방향성은 하에서 상 flex-wrap 줄 넘김 처리 .flex-container { display: flex; flex-direction: row; flex-wrap: nowrap; } nowrap : 기본 값. 아이템을 한 줄에 모두 표현 wrap : 아이템이 적정 길이 이상으로 길다면, 복수의 줄에 걸쳐 표현 wrap-reverse : wrap과 같지만, 방향성이 반전되어 표현. 한마디로, 역방향으로 줄 넘김이 발생 justify-content 수평 방향으로 정렬하는 방식 .flex-container { display: flex; flex-direction: row; flex-wrap: nowrap; justify-content: flex-start; } flex-start : 아이템을 한 덩어리로 묶어, 수평방향의 시작 점에 위치 flex-enter : 아이템을 한 덩어리로 묶어, 수평방향의 끝 점에 위치 center : 아이템을 한 덩어리로 묶어, 수평방향의 중앙에 위치 space-between : 아이템을 컨테이너의 양쪽 끝에 맞춰 정렬 space-around : 컨테이너의 양쪽 끝을 기준으로 각 아이템의 전, 후에 일정한 간격의 공간을 만들어 정렬 align-items 수직방향으로 정렬하는 방식 .flex-container { display: flex; flex-flow: row nowrap; align-items:flex-start; } flex-start : 아이템을 한 덩어리로 묶어, 수직방향의 시작 점에 위치 flex-enter : 아이템을 한 덩어리로 묶어, 수직방향의 끝 점에 위치 center : 아이템을 한 덩어리로 묶어, 수직방향의 중앙에 위치 baseline : 아이템을 컨테이너의 baseline에 맞춰 정렬 stretch : 컨테이너의 양쪽 끝을 기준으로 각 아이템의 전, 후에 일정한 간격의 공간을 만들어 정렬 align-content 한 줄을 넘기는 아이템들을 수직방향으로 정렬 (&quot;align-itm&quot;과 “justify-content” 속성을 모두 가지고 있음) .flex-container { display: flex; flex-flow: row nowrap; align-items:flex-start; } flex-start : 아이템을 한 덩어리로 묶어, 수직방향의 시작 점에 위치 flex-enter : 아이템을 한 덩어리로 묶어, 수직방향의 끝 점에 위치 center : 아이템을 한 덩어리로 묶어, 수직방향의 중앙에 위치 baseline : 아이템을 컨테이너의 baseline에 맞춰 정렬 space-between : 컨테이너의 수직방향 기준으로 아이템 사이의 줄(행)을 일정한 간격을 두고 정렬 space-around : 컨테이너의 양쪽 끝을 기준으로 각 아이템 줄(행)의 전, 후에 일정한 간격의 공간을 만들어 정렬 stretch : 컨테이너의 양쪽 끝을 기준으로 각 아이템의 전, 후에 일정한 간격의 공간을 만들어 정렬 자료 : beautifulcss님의 블로그 내용 참고","categories":[{"name":"CSS","slug":"CSS","permalink":"http://jinwoopark94.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://jinwoopark94.github.io/tags/CSS/"}]},{"title":"180117-Daily-Summary - CSS font-family, nth-child, img(art속성)","slug":"180117-Daily-Summary","date":"2018-01-17T11:30:31.000Z","updated":"2018-01-22T13:49:31.225Z","comments":true,"path":"2018/01/17/180117-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/17/180117-Daily-Summary/","excerpt":"","text":"CSS 속성 font-family 텍스트의 폰트를 지정 font-family:\"NanumGothic, sans-serif\" OR font-family:\"NanumGothic, serif\" 코드 해석 : font-family에서 첫번째 “NanumGothic” 폰트가 없을시, “sans-serif” 나 &quot;serif&quot;를 사용 (최근에는 모바일 가독성 때문에 sans-serif를 많이 사용함) nth-child 1. nth-child(8) 해당 요소의 8번째 요소만 변경가능하게 스타일을 줄 수 있음 2. nth-child(n+6) 해당 요소의 6번째 요소부터 모두 스타일을 줄 수 있음 3. nth-child(-n+9) 해당 요소의 반대쪽 9번째 요소부터 시작해서 모두 스타일을 줄 수 있음 4. nth-child(n+4):nth-child(-n+8) 해당 요소의 4번째 요소부터 반대쪽 8번째까지 스타일을 줄 수 있음 5. nth-child(n+2):nth-child(odd):nth-child(-n+9) 해당 요소의 2번째 부터 반대쪽 9번째 요소까지의 홀수를 구할 수 있음 6. nth-child(3n+1):nth-child(even) 해당 요소의 첫번째 부터 짝수를 구할 수 있음 (일반적으로 1, 4, 7, 10 이러한 식으로 흘러가지만 짝수만 포함하면 4와 10이 해당됨) 7. nth-child(even), nth-child(old) 해당 요소의 짝수(even), 홀수(old)로 구분하여 스타일을 줄 수 있음 순서대로 사용한다고 한다면 &quot;old&quot;은 첫번째 스타일(홀수), &quot;even&quot;는 두번째 스타일(짝수) img(art 속성) &lt;img src=&quot;이미지 경로&quot; art=&quot;이미지 설명&quot;&gt; art를 표시하는 이유는 이미지 경로가 안 맞을때 설명해주는 의도로 사용할 수 있는데 더 중요한 것은 장애를 가지신 분들도 정보를 얻을 수 있게 하기 위해 넣는 것이다.","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"웹 접근성 (인식의 용이성, 운용의 용이성, 이해의 용이성, 견고성)","slug":"web-accessibility","date":"2018-01-17T11:08:59.000Z","updated":"2018-01-17T11:25:41.428Z","comments":true,"path":"2018/01/17/web-accessibility/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/17/web-accessibility/","excerpt":"","text":"웹 접근성 - 한국형 웹 콘텐츠 접근성 지침 1. 인식의 용이성 대체 텍스트 텍스트 아닌 콘텐츠는 그 의미나 용도를 인식할 수 있도록 대체 텍스트를 제공해야 한다. 적절한 대체 텍스트 제공 멀티미디어 대체 수단 멀티미디어 콘텐츠에는 자막, 대본 또는 수화를 제공해야 한다. 자막 제공 명료성 콘텐츠는 색에 관계없이 인식될 수 있어야 한다. 색에 무관한 콘텐츠 인식 지시 사항은 모양, 크기, 위치, 방향, 색, 소리 등에 관계없이 인식될 수 있어야 한다. 명확한 지시 사항 제공 텍스트 콘텐츠와 배경 간의 명도 대비는 4.5 대 1 이상이어야 한다. 텍스트 콘텐츠의 명도 대비 자동으로 소리가 재생되지 않아야 한다. 자동 재생 금지 이웃한 콘텐츠는 구별될 수 있어야 한다. 콘텐츠 간의 구분 2. 운용의 용이성 입력장치 접근성 모든 기능은 키보드만으로도 사용할 수 있어야 한다. 키보드 사용 보장 키보드에 의한 초점은 논리적으로 이동해야 하며 시각적으로 구별할 수 있어야 한다. 초점 이동 사용자 입력 및 컨트롤은 조작 가능하도록 제공되어야 한다. 조작 가능 충분한 시간 제공 시간제한이 있는 콘텐츠는 응답시간을 조절할 수 있어야 한다. 응답시간 조절 자동으로 변경되는 콘텐츠는 움직임을 제어할 수 있어야 한다. 정지 기능 제공 광과민성 발작 예방 초당 3~50 회 주기로 깜빡이거나 번쩍이는 콘텐츠를 제공하지 않아야 한다. 깜박임과 번쩍임 사용 제한 쉬운 내비게이션 콘텐츠의 반복되는 영역은 건너뛸 수 있어야 한다. 반복 영역 건너뛰기 페이지, 프레임, 콘텐츠 블록에는 적절한 제목을 제공해야 한다. 제목 제공 링크 텍스트는 용도나 목적을 이해할 수 있도록 제공해야 한다. 적절한 링크 텍스트 3. 이해의 용이성 가독성 주로 사용하는 언어를 명시해야 한다. 기본 언어 표시 예측 가능성 사용자가 의도하지 않은 기능(새 창, 초점에 의한 맥락 변화 등)은 실행되지 않아야 한다. 사용자 요구에 따른 실행 콘텐츠의 논리성 콘텐츠는 논리적인 순서로 제공해야 한다. 콘텐츠의 선형 구조 표는 이해하기 쉽게 구성해야 한다. 표의 구성 입력 도움 사용자 입력에는 대응하는 레이블을 제공해야 한다. 레이블 제공 입력 오류를 정정할 수 있는 방법을 제공해야 한다. 오류 정정 4. 견고성 문법 준수 마크업 언어의 요소는 열고 닫음, 중첩 관계 및 속성 선언에 오류가 없어야 한다. 마크업 오류 방지 웹 애플리케이션 접근성 콘텐츠에 포함된 웹 애플리케이션은 접근성이 있어야 한다. 웹 애플리케이션 접근성 준수 자료 : 한국형 웹 콘텐츠 접근성 지침 참고","categories":[{"name":"Web Accessibility","slug":"Web-Accessibility","permalink":"http://jinwoopark94.github.io/categories/Web-Accessibility/"}],"tags":[{"name":"Web Accessibility","slug":"Web-Accessibility","permalink":"http://jinwoopark94.github.io/tags/Web-Accessibility/"}]},{"title":"TIL-180116","slug":"TIL-180116","date":"2018-01-16T12:32:10.000Z","updated":"2018-01-17T11:55:30.906Z","comments":true,"path":"2018/01/16/TIL-180116/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/16/TIL-180116/","excerpt":"","text":"오늘 한 일 Git 생활코딩 과거 버전으로 돌아가기까지 공부한 후 블로그에 글로 정리 하루 들었던 강의 내용 정리(CSS) flexbox 생활코딩 강의 듣기 내일 할 일 Git에 대한 원리에 대해 생활코딩 강의 듣기 하루 들었던 강의 내용 정리 flexbox 관련하여 정리해서 블로그에 올리기 오늘 느낀 것 항상 웹 페이지 작업 중 레이아웃 구성할 때 float라는 속성을 이용하여 많이 작업을 했다. 근데 오늘 처음으로 flexbox라는 속성을 배우게 되었는데 신세계를 맛보았다. flexbox를 잘 이용한다면 float 보다 쉬운 작업을 진행함과 동시에 모바일에서도 float로 머리 아플 일도 없을 것 같다. 하지만 여러 가지 브라우저들을 지원하지만 Internet Explorer 11버전 이상부터 지원을 하여 Internet Explorer 점유율이 높은 우리나라에서 사용하기에는 무리인 것 같다. Internet Explorer의 점유율이 1% 아래로 내려가는 날이 왔으면 좋겠다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"git - Stage area, Repository, log, diff, reset, revert","slug":"git-intro1","date":"2018-01-16T09:27:25.000Z","updated":"2018-01-16T12:12:34.107Z","comments":true,"path":"2018/01/16/git-intro1/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/16/git-intro1/","excerpt":"","text":"Stage area, Repository &quot;git add&quot;를 하게되면 파일들이 commit 대기 상태가 되는데 commit 대기하는 곳이 Stage area이다. 파일을 &quot;git commit&quot;을 한 후 &quot;git push&quot;를 이용해 서버에 올리면 commit 된 파일이 저장되는 곳이 Repository이다. 변경사항 확인하기 (git log, git diff) 로그에서 출력되는 버전 간의 차이점을 확인하고 싶을 때 사용한다. git log -p 버전 간의 차이점을 비교할때 사용한다. git diff '버전 id'..'버전 id2' git add하기 전과 add한 후의 파일 내용을 비교할때 사용한다. git diff 과거의 버전으로 돌아가기 (git reset, git revert) 버전관리의 중요한 효용은 과거로 돌아갈 수 있다는 점이다. 방법은 총 2가지가 있는데 &quot;git reset – ‘버전 id’&quot;와 &quot;git revert ‘버전 id’&quot;가 있다. 하지만 뭐든지 과거로 돌아가는 작업은 위험한 작업이니 2번 3번 확인하고 사용하는게 좋다. 1. reset 방법 버전에 대한 정보를 확인합니다. git log 이전 버전으로 돌릴려는 버전의 commit id를 복사합니다. reset 명령어를 통해 reset을 진행합니다. git reset --hard 7352a7d3bd60a291e0a0f20f70cf76728d72ce8d 2. revert 방법 (commit을 취소하며 새로운 버전을 생성한다.) 버전에 대한 정보를 확인합니다. git log 이전 버전으로 돌릴려는 버전의 commit id를 복사합니다. reset 명령어를 통해 reset을 진행합니다. git revert 7352a7d3bd60a291e0a0f20f70cf76728d72ce8d 이 과정은 생활코딩-지옥에서 온 git 수업을 듣고 정리한 내용입니다.","categories":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/tags/git/"}]},{"title":"180116-Daily-Summary - CSS","slug":"180116-Daily-Summary-CSS","date":"2018-01-16T08:49:26.000Z","updated":"2018-01-16T09:13:23.426Z","comments":true,"path":"2018/01/16/180116-Daily-Summary-CSS/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/16/180116-Daily-Summary-CSS/","excerpt":"","text":"CSS3 (Cascading Style Sheet) W3C의 표준이며, 레이아웃과 스타일을 정의할 때의 자유도가 높은 언어 CSS3 탄생 1996년 W3C의 주도하에 첫 번째 CSS 버전인 CSS Level 1 발표 1998 ~ 2000 CSS Level2가 등장하면서 대부분의 웹 브라우저가 css Level 2를 지원 그 후 CSS Level 2의 버그를 수정한 CSS Level 2.1이 2006년에 발표되면서 현재까지 표준으로 사용 CSS Level 3는 CSS Level 2.1과 달리 모든 명세가 포함된 버전이 아닌 모듈 단위로 개발되고 있으며, 표 준화가 모듈 단위로 진행되고 있음. 이 중 몇몇 모듈은 현재 Recomendation(권고안) 단계에 있으며, Working Draft(초안) 단계에 머물러 있는 모듈도 있음. CSS 기초 CSS 기본문법 CSS 웹 브라우저별 접두사 CSS3는 표준안이 확정되지 않은 상태이기 때문에 최신 웹 브라우저들은 CSS3 속성을 실험적으로 제공 (각 브라우저별 엔진 성능에 따라 보여지는 것과 제공하는 것이 다름) 파이어폭스(Firefox) : -moz- 크롬, 사파리(Chrome, Safari) : -webkit- 오페라(Opera) : -o- 인터넷 익스플로러(IE) : -ms- 현재는 접두사를 안붙이는 추세로 바뀌고 있음 CSS 주석 CSS 주석은 아래와 같이 사용함 /* 이곳은 주석입니다. */ CSS 색상 RGBA 형식 HSLA 형식 CSS 단위 상대 단위 절대 단위 주로 사용하는 단위 : px, em, rem, vw, vh CSS 선택자 전체 선택자 : 모든 요소를 선택하는 방법으로 &quot;*&quot;를 선택자로 선언*{ margin:0; padding:0; } 요소 선택자 : HTML 요소를 선택하는 방법으로 “h1”, “p”, &quot;div&quot;를 선택자로 선언div{ border:1px solid #e0e0e0; } 클래스 선택자 : HTML 요소의 class 속성 값을 참조하여 설정하는 방법.header-div{ font-size:12px; } 아이디 선택자 : HTML 요소의 id 속성 값을 참조하여 선택하는 방법#main{ background-color:#e0e0e0; } 가상 클래스 선택자 : 요소의 상태나 상황에 따라 선택하는 방법으로, 링크의 경우 방문하기 전, 방문한 후, 링크 위에 마우스를 올려놓거나 포커스 시 등의 상황을 선택하여 스타일 지정이 가능 .a:link{ color:#red; } 하위 선택자 : 선택자와 선택자를 공란으로 선언하며, 선행 선택자의 하위 요소 중 후행 선택자에 해당하는 요소를 선택하는 방법#main div{ border:3px solid black }","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"180115-Daily-Summary - WWW, WEB, HTML","slug":"180115-Daily-Summary","date":"2018-01-15T14:45:02.000Z","updated":"2018-01-16T09:13:31.013Z","comments":true,"path":"2018/01/15/180115-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/15/180115-Daily-Summary/","excerpt":"","text":"WWW(World Wide Web) 인터넷에 연결된 컴퓨터들을 통해 사람들이 정보를 공유할 수 있는 전 세계적인 정보 공간 Web BACK-END 사용자에게는 보이지 않는, 뒷면에서 작업이 이루어지는 단 서버 사이드 JAVA JSP Spring Mysql FRONT-END 사용자와 직접 접촉하는 단 클라이언트 사이드 HTML5 CSS3 Javascript FRONT-END Web 기술의 설정값 HTML5 : 뼈대 CSS3 : 근사한 스타일링 Javascript : 스마트한 두뇌 Web 표준(Web Standards) 웹(Web)에서 표준적으로 사용되는 기술이나 규칙 Web 접근성(Web Accessibility) 장애를 가진 사람과 장애를 가지지 않은 사람 모두가 웹사이트를 이용할 수 있게 하는 방식 다양한 Platform Cross Browsing SEO (Search Engine Optimization)(검색 엔진 최적화) 저사양 또는 저속회선 HTML World Wide Web(www)을 위한 마크업 언어이며, 제목이나 문단, 표, 꼬리글 및 기타 요소를 이용하여 콘텐츠의 구조를 정의함으로써 웹 문서를 만드는 기능을 제공 Markup의 기초 : HTML 문서는 요소(element)와 태그(tag) 그리고 콘텐츠로 구성되어 있으며, 요소는 HTML의 의미를 가짐 HTML5 탄생 팀버너스리에 의해 설계되어 HTTP, URI, 브라우저와 함께 1990년에 개발 1999 ~ 2000년 HTML 4.01, XHTML 1.0이 권고 2000년 XHTML 1.0 2004년 Apple, Mozilla, Opera가 공통으로 WHATWG (Web Hypertext Application Technology Working Group) 발족 -&gt; 널리 보급된 HTML에 기초하여 브라우저에 실제 구현된 기능을 중시, 현실적인 접근법을 채틱 2007년 W3C가 WHATWG와 공통으로 HTML5 제정에 합류 2008년 HTML 5 초안 공개 2009년 XHTML 2.0의 사양제정 중지 HTML4.01, XHTML1.0과 HTML5의 차이점 1. Contents Model의 추가 HTML4.01보다 훨씬 더 시멘틱한 웹 구성이 가능해짐 2. Language의 추가 HTML4.01에서 HTML5로 개정이 되면서 이전 문서들과 다르게 추가되거나 변경됨 3. API HTML4.01에서 HTML5로 개정이 되면서 새롭게 사용 가능한 API 기능이 추가됨 HTML 개발 순서 1. 구조설계 -&gt; 2. 의미에 맞는 마크업 설정 -&gt; 3. 네이밍 설정 HTML 실습 예제 1234567891011121314151617181920&lt;!DOCTYPE html&gt; &lt;!-- HTML5 선언 --&gt; &lt;html lang=\"ko\"&gt;&lt;head&gt; &lt;!--인코딩을 UTF-8로 설정--&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;!-- 파비콘 추가 --&gt; &lt;link rel=\"shortcut icon\" href=\"./images/common/favicon.ico\" type=\"image/x-icon\"&gt; &lt;!-- 사용자가 모바일에서 북마크나 바로가기 만들시 표시되는 아이콘 --&gt; &lt;link rel=\"apple-touch-icon\" href=\"./images/common/favicon.ico\"&gt; &lt;title&gt;웹카페 - HTML5,CSS3,Accessibility&lt;/title&gt; &lt;!-- css 추가 : style.css --&gt; &lt;link rel=\"stylesheet\" href=\"./css/style.css\"&gt; &lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"TIL-180115","slug":"TIL-180115","date":"2018-01-15T14:39:49.000Z","updated":"2018-02-11T12:58:51.808Z","comments":true,"path":"2018/01/15/TIL-180115/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/15/TIL-180115/","excerpt":"","text":"오늘 한 일 지옥에서 온 Git 생활코딩 버전 만들기(commit)까지 공부(복습) 지난 일주일 동안 패스트 캠퍼스에서 배웠던 내용들을 정리 하루 들었던 강의 내용 정리 블로그 컨텐츠 추가(Git, TIL, Daily-Summary-Fds) 내일 할 일 Git 생활코딩 과거 버전으로 돌아가기까지 공부하기 하루 들었던 강의 내용 정리 오늘 느낀 것 지금까지 웹 접근성을 고려하면서 웹 사이트를 제작했다고 생각했는데 아직 많이 부족한거 같다. 이번 HTML/CSS/Javascript 강의를 통해 지식을 습득하고 웹 접근성과 호환성을 고려하여 홈페이지를 제작해봐야겠다.","categories":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"http://jinwoopark94.github.io/tags/TIL/"}]},{"title":"git - init, add, commit","slug":"git-intro0","date":"2018-01-15T12:51:17.000Z","updated":"2018-01-16T09:29:07.622Z","comments":true,"path":"2018/01/15/git-intro0/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/15/git-intro0/","excerpt":"","text":"저장소 만들기 (git init) 저장소를 만들기 위해서는 &quot;git init&quot;이라는 명령어를 입력해야 한다. 먼저 프로젝트 폴더를 만듭니다. ( Linux 명령어 -&gt; mkdir: 폴더 생성 ) mkdir gitblog 방금 만든 프로젝트 폴더로 이동합니다. ( Linux 명령어 -&gt; cd: 폴더 이동 ) cd gitblog git 저장소를 만듭니다. git init 아래의 명령어를 입력하여 .git 폴더가 생성 되었는지 확인합니다. ( Linux 명령어 -&gt; ls -la: 경로 안의 모든 내용을 출력 ) git 추가, 상태 확인 (git add, status) git은 기본적으로 새로운 파일을 관리하지 않으며 파일을 관리하기 위해서는 등록이 필요합니다. git 파일 등록은 &quot;git add&quot;라는 명령어를 입력해야 합니다. 이 후 현재 git 폴더 상태를 확인하고 싶으면 &quot;git status&quot;라는 명령어를 사용합니다. 파일을 생성합니다. (Linux 명령어 -&gt; touch: 파일 생성) touch blog-contents.txt 현재 프로젝트 폴더의 상태를 확인해봅니다. git status (git 파일 등록이 안된 상태라 그림과 같이 Untracked files에 빨간색으로 표시됩니다.) git 파일을 등록합니다. git add blog-contents.txt 등록 후 다시 현재 프로젝트 폴더의 상태를 확인해봅니다. git status (git 파일 등록이 되면 위의 그림과 같이 초록색으로 표시됩니다.) git 버전 만들기 (git commit, config) 일단 먼저 버전에 포함될 버전을 만든 사람에 대한 정보를 설정합니다. 이 설정은 ~/.gitconfig 파일에 저장되고 1번만 하면 됩니다. git config --global user.name \"자신의 닉네임\" git config --global user.email \"자신의 이메일\" git 버전에 &quot;git commit&quot;라는 명령어를 이용하여 commit 메세지와 함께 commit합니다. git add blog-contents.txt # git commit을 하기 전 add를 먼저 해줘야 한다. git commit -m \"commit msg\" # commit 메세지를 작성 후 commit 버전에 대한 정보를 확인합니다. git log 이 과정은 생활코딩-지옥에서 온 git 수업을 듣고 정리한 내용입니다.","categories":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://jinwoopark94.github.io/tags/git/"}]},{"title":"180112-Daily - Summary-Socket, Web-browser, API","slug":"180112-Daily-Summary","date":"2018-01-12T12:16:49.000Z","updated":"2018-01-16T09:13:36.282Z","comments":true,"path":"2018/01/12/180112-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/12/180112-Daily-Summary/","excerpt":"","text":"Socket 네트워크상에서 서버와 클라이언트 두개의 프로그램이 특정 포트를 통해 양방향 통신이 가능하도록 만들어 주는 소프트웨어 장치 간단하게 떨어져 있는 두 컴퓨터를 연결해주는 과정 Socket 암호화 TLS (Transport Layer Security) : 프로토콜에 의한 암호화 SSI (Secure Socket Layer) : 포트에 의한 암호화 Web Programming 웹 개발 1세대 (1991 ~ 1999) 하이퍼텍스트 기반의 프로젝트를 제안이 된 후 정적인 컨텐츠들을 중심으로 웹 기술이 발달 -&gt; 정적 웹 페이지 多 웹 개발 2세대 (1999 ~ 2009) Linux, Apache, Mysql, Php 중심의 동적인 서버, 정적인 클라이언트 모델이 지속됨 -&gt; 정적 웹 페이지가 점점 감소하며, 동적 웹 페이지가 多 웹 개발 3세대 (2000 ~ 현재) JavaScript에서 클라이언트와 서버를 같은 언어로 구현 가능해짐 -&gt; 동적 웹 페이지 多 여기서 잠깐 정적 웹 페이지와 동적 웹 페이지가 어떤 것일까? 정적 웹 페이지 : 서버(Web Server)에 미리 저장된 파일(HTML 파일, 이미지, Javascript 파일 등)이 그대로 전달되는 웹 페이지 동적 웹 페이지 : 서버(Web Server)에 있는 데이터들을 스크립트에 의해 가공처리한 후 생성되어 전달되는 웹 페이지 정적 웹 페이지 요청에 대한 파일만 전송하면 되기 때문에 추가적인 작업이 필요없음 저장된 정보만 보여줄 수 있음 추가/수정/삭제의 작업 모두 수동으로 작업해야함 예) 같은 페이지에 다른 정보들을 요청하는 100 페이지가 들어오면 100페이지를 전부 작업 동적 웹 페이지 사용자에 웹 페이지를 전달하기 전에 처리하는 작업이 필요 다양한 정보를 조합하여 동적으로 생성하여 제공가능 추가/수정/삭제의 작업에 용이함 예) 같은 페이지에 다른 정보들을 요청하는 페이지가 100페이지 들어오면 관련 데이터를 DB(Database)에서 받고 1페이지만 작업 Web Browser 웹 서버에서 쌍방향 통신하는 HTML 문서나 파일과 연동하고 출력하는 응용 소프트웨어 Mosaic(1993) -&gt; netscape(1994) -&gt; Internet Explorer(1995) -&gt; FireFox(2004) -&gt; Chrome(2008) 현재 전 세계 웹 브라우저 점유율(2017.12) 현재 한국 웹 브라우저 점유율(2017.11) Web architecture URI, URL, URN URI (Uniform Resource Information) : 모든 정보의 리소스를 가리키는 식별자 http://www.example.com/post/how-to-make-url -&gt; 프로토콜 + 도메인 + Path + 파일이름 URL (Uniform Resource Locator) : 리소스의 위치를 나타내는 것 https://www.example.com/post/ -&gt; 프로토콜 + 도메인 + Path URN (Uniform Resource Name) : 리소스의 이름을 나타내는 것 www.example.com/post/how-to-make-url -&gt; 도메인 + Path + 파일이름 API (Application Program Interface) 응용프로그램에서 사용할 수 있도록 운영체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스 Web API 웹서버 혹은 브라우저를 위한 API REST API (Representational State Transfer Application Programming Interface) HTTP URL로 잘 표현된 리소스에 대한 행위를 HTTP Method로 정의하는 것 무엇을 (HTTP URL로 정의 된 리소스) 어떻게(HTTP Method)한다 REST API 장/단점 장점 : 스펙없이 기존의 HTTP를 이용해 요청을 처리할 수 있다. 단점 : 사용할 수 있는 메소드가 4개(Get, Post, Put, Delete)며, 표준이 없다. Graphql 최신 응용 프로그램의 복잡하고 중첩 된 데이터 종속성을 설명하기 위해 고안된 데이터 쿼리 언어 Graphql 장/단점 장점 요청에 따른 응답데이터 구조를 예측 가능 직관적 REST API의 N+1 Problem을 해결 가능 확장이 용이함 단점 코드가 추가되면서 단순한 App에서는 코드가 더 복잡해짐 출시한지 얼마 안되어 안정성 문제가 생길 수 있음","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"180111-Daily-Summary - Network","slug":"180111-Daily-Summary","date":"2018-01-11T12:12:32.000Z","updated":"2018-01-16T09:13:42.050Z","comments":true,"path":"2018/01/11/180111-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/11/180111-Daily-Summary/","excerpt":"","text":"Network 컴퓨터간 리소스를 공유 가능하게 만드는 통신망 특징 네트워크로 연결된 다른 컴퓨터에 접근하여 파일을 생성, 수정, 삭제가 가능 프린터, 스캐너, 팩스 등 출력장치에 네트워크를 연결하여 여러 컴퓨터가 동시에 접근 가능 종류 네트워크 케이블 스위치 허브 라우터 네트워크 카드 유선 : LAN, MAN, WAN LAN (Local Area Network) : 근거리 통신망으로 학교,회사 등 가까운 지역의 좁은 범위 MAN (Metropolitan Area Network) : 도시권 통신망으로 도시나 지역 사회의 범위 WAN (Wide Area Network) : 광역 통신망으로 국가, 대륙 등 넓은 지역의 범위 무선 : WLAN WLAN (Wireess Local Area Network) : 무선 근거리 통신망으로 IEEE 802.11 표준을 기반하여 사무실, 집 정도의 범위 여기서 잠깐! 802.11과 Wifi가 같을까? 정답은 다르다. 802.11은 IEEE에서 개발된 표준 무선 통신 기술을 뜻하며 Wifi는 802.11기술을 사용하는 무선 근거리 통신망이다. (802.11 &gt; Wifi) 이외의 네트워크 종류 Lifi (Light Fidelity) : IEEE 802.15.7r1 표준을 기반하여 빛에 직진성을 이용한 통신 네트워크의 망 종류 Ring, Mesh, Star, Fully Connected, Line, Tree, Bus Network OSI 7 layer(Open Systems Interconnection Reference Model) 국제 표준화기구에서 개발한 컴퓨터 네트워크 프로토콜 디자인과 통신을 계층으로 나눈 것 네트워크 지원계층 (Layer 1~3) 한 장치에서 다른 장치로 데이터를 이동할 때 전기적인 규격, 물리적인 연결, 물리 주소, 전송 시간과 신뢰도 등 물리적인 면을 처리 함 Ex) ICMP, ARP, RARP, IP 1 . Physical layer (물리층) : 네트워크 데이터가 전송될 때 사용되는 물리적 매개체로 물리적인 장치와 인터페이스가 전송을 위해 필요한 기능 및 처리 절차를 규정 2 . Data link Layer (데이터링크층) : 물리적인 네트워크 사이의 데이터 전송을 담당하며 장비를 식별하는 데 사용되는 주소 지정 체계와 데이터가 변조되지 않았음을 확증하기 위해 오류 확인 제공 3 . Network Layer (네트워크층) : 패킷을 발신지로부터 여러 네트워크를 통해 목적지까지 전달함 전송층 (Layer 4) 종단대 종단간 신뢰 할 수 있는 데이터 전송 보장 Ex) 4) TCP, 8) UDP 4 . Transport Layer (전송층) : 지점과 지점 간의 오류가 없음을 보장하여 아래 계층(Layer 1, 2, 3)의 신뢰성 있는 데이터를 전송 사용자 지원계층 (Layer 5~7) 서로 상관 없는 소프트웨어 시스템 사이의 상호 연동을 가능하게 함 Ex) 1) HTTP, 2) FTP, 3) SMTP, 4) TCP, 5) IP, 6) DNS, Telnet, DHCP, TFTP 5 . Session Layer (세션층) : 세션 연결의 설정과 해제, 세션 메시지 전송 등의 기능을 함 6 . Presentation Layer (표현층) : 응용 계층으로 부터 전송 받거나 전달되는 데이터의 인코딩과 디코딩을 함 7 . Application Layer (응용층) : 네트워크 활동들에 대한 모든 기본적인 인터페이스 제공 용어 설명 1 ) HTTP (HyperText Transfer Protocol) : www상에서 정보를 주고 받는 프로토콜로 TCP, UDP를 활용 2 ) FTP (File Transfer Protocol) : 서버와 클라이언트 사이에 파일을 전송하기 위한 프로토콜 -&gt; 보안에 매우 취약하며 현재는 보안이 강화된 FTPS, SFTP, SSH 등을 사용 3 ) SMTP (Simple Mail Transfer Protocol) : Internet에서 메일을 보내기 위한 프로토콜 4 ) TCP (Transmission Control Protocol) : 전송제어 프로토콜로 근거리 통신망이나 인트라넷, 인터넷에 연결된 컴퓨터에서 안정적으로, 순서대로, 에러없이 교환할 수 있게함 5 ) IP (Internet Protocol) : 호스트의 주소지정과 패킷 분할 및 조립을 담당하며 종류로는 IPv4(32bit), IPv6(128bit)가 존재함 6 ) DNS (Domain Name System) : 복잡한 Ip adress를 사람이 판별하기 쉬운 url로 매핑하는 시스템 7 ) 서브넷 마스크 (Subnetmask) : 커다란 네트워크를 효율적으로 분배하여 사용하기 위한 방법 8 ) UDP (User Datagram Protocol) : 데이터그램을 전송하기 위한 프로토콜로 빠른 속도를 자랑하지만 단순하여 신뢰성이 낮고 데이터그램 도착 순서가 바뀌거나, 중복되거나, 통보 없이 누락되기도 함 TCP vs UDP Segment TCP는 Stream 형식으로 에러가 있으면 다시 요청 가능하지만 UDP는 Datagram 형식으로 에러가 있던 말던 그냥 보내버림","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"180110-Daily-Summary - Linux, git","slug":"180110-Daily-Summary","date":"2018-01-10T10:50:52.000Z","updated":"2018-01-16T09:13:47.581Z","comments":true,"path":"2018/01/10/180110-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/10/180110-Daily-Summary/","excerpt":"","text":"Linux 리누스 토발즈가 작성한 커널 혹은 GNU 프로젝트의 라이브러리와 도구가 포함된 운영체제 Kernel (OS) 하드웨어와 응용프로그램을 이어주는 소프트웨어 Shell 커널과 사용자를 이어주는 소프트웨어 Bash 기본 명령어 및 설명 cd : 디렉토리 이동 ls : 파일리스팅 (-la 추가시 목록으로 보여짐) mkdir : 디렉토리 이동 touch : 파일 생성 mv : 파일 이동 (파일 이름 수정 가능) cp : 파일 복사 rm : 파일 삭제 (-rf 추가시 디렉토리 삭제) chmod : 파일 권한 주기 ex) drwxr-xr-x d or - : 디렉토리 or 파일 r : read w : write x : execute &quot;-&quot; :권한 없음 모든 권한은 8진수로 표현함 Vim 기본명령어 및 설명 i or insert : 작성 모드 v : 비쥬얼 모드 d : 행 삭제 y : 복사 p : 붙여넣기 :q : 나가기 :q! : 저장을 안한 후 모든 경고 무시하고 나가기 wq : 저장하고 나가기 Git 소스 코드 관리를 위한 분산 버전 관리 시스템 Git의 장점 2주만에 개발되어 단순한 구조로 빠른 속도를 자랑함 소스코드 주고받을 필요가 없이 동시작업이 가능 (생산성 ↑) 오프라인에도 개발 가능 Git 기본 사용법 github.com에서 새로운 Repo 만들기 터미널에서 레포이름과 같은 디렉토리 만들기 디렉토리에서 $ git init 새 파일 생성, 수정 및 저장 $ git add 파일이름 $ git commit -m “커밋메세지” git push {레포 주소} master github에서 반영 되었는지 확인 Git clone을 이용한 사용법 github.com에서 새로운 Repo 만들기 터미널에서 레포이름과 같은 디렉토리 만들기 git clone {레포 주소} 새 파일 생성, 수정 및 저장 $ git add 파일이름 $ git commit -m “커밋메세지” $ git push {레포 주소} master github에서 반영 되었는지 확인 파일 수정시 Add -&gt; Commit -&gt; Push 의 순서대로 진행 자주 사용하는 레포 주소는 아래와 같이 별명으로 설정 가능 $ git remote add (별명) {레포 주소} Git branch 분기점을 생성하고 독립적으로 코드를 변경할 수 있도록 도와주는 모델 Git branch 명령어 및 설명 git branch (stem) : branch 생성 git checkout (stem) : branch 사용 git checkout -b (new-stem) : branch 새로 생성 후 사용 git branch -D (stem) : branch 삭제","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]},{"title":"180109-Daily-Summary - 마크다운, 의사코드, 알고리즘, 자료구조","slug":"180109-Daily-Summary","date":"2018-01-09T11:52:52.000Z","updated":"2018-01-16T09:13:51.469Z","comments":true,"path":"2018/01/09/180109-Daily-Summary/","link":"","permalink":"http://jinwoopark94.github.io/2018/01/09/180109-Daily-Summary/","excerpt":"","text":"Markdown (마크다운) 텍스트 기반의 마크업언어로 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다. 장점 간결함 별도의 도구없이 작성가능 다양한 형태로 변환 가능 지원하는 프로그램과 플랫폼이 다양 단점 표준이 없음 (도구에 따라서 변환 방식이나 생성물이 다름) 모든 HTML 마크업을 대신하지 못함 예) HeadingMark blockquote List Bold Img table Pseudocode (의사코드) 프로그램이나 알고리즘을 프로그래머가 이해할 수 있는 언어로 표현하는 것 목적과 수행과정이 명확해 코드 수정과 분해가 편리함 Algorithm (알고리즘) 목표를 달성하거나 결과물을 생산하기 위해 필요한 과정 Conditions 외부에서 오는 값이 있어야함 1개 또는 1개 이상의 결과가 있어야함 간단함 명확성(Clarity) 명확성(Clarity) time complexity == big O notation 자료의 수 (n)이 증가할 때 시간의 증가 패턴을 나타낸 것 big O notation ? 1 log n n n log n n2 n3 2n n! O(1) : Constant 값에 대한 키 또는 인덱스를 알고 있을 경우 O(log n) : Logarithmic 배열에서 값을 접근할 때 앞 또는 뒤에서 접근 선택이 가능 O(n) : Linear 자료의 수와 시도횟수가 1:1 관계인 경우 O(n2) : Quadratic 자료의 참조를 이중으로 하게 될 경우 (이중 for문) Sort algorithms O(n2) Bubble sort : 1:1로 n(n-1)/2 번 수행하는 방법 Selection sort : 가장 가까운 값 부터 차례대로 정렬 Insertion sort : n번째 요소를 처음부터 n-1번째까지 비교하면서 값을 끼워넣는 법 O(n log n) Merge sort :두개씩 쪼개어 각각 비교하여 정렬하는 방법 Heap sort : 데이터를 힙에 넣은 뒤 최대값을 출력하고 힙에서 제거하여 나열 Quick sort : 피벗을 기준으로 큰 값 작은 값을 나눈 뒤, 피벗을 옮겨 다시 수행하는 방법 영상 : https://www.youtube.com/watch?time_continue=17&amp;v=WaNLJf8xzC4 자료구조(Data Structure) 컴퓨터에서 데이터를 구성하는 특별한 방법으로 효율적으로 사용 가능 Stack 이란? 추상 데이터 유형으로 요소 컬렉션으로 사용되며, 두 가지 주요 작업(Push, Pop) Push : 컬렉션 요소 추가 Pop : 컬렉션 요소 제거 LIFO : Last In, First Out Queue 이란? 대기열은 특정 종류의 추상 데이터 유형 또는 컬렉션으로, 컬렉션의 엔티티는 순서대로 유지(Push, Pop) Enqueue : 뒤쪽 터미널 위치에 객체 추가 Dequeue : 앞쪽 터미널에서 부터 객체 제거 FIFO : First In, First Out 영상 : https://www.youtube.com/watch?v=9RHO6jU--GU DOM 이란? Documnet object modeling 객체를 모델화 시킨 것","categories":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/categories/Daily-Summary-Fds/"}],"tags":[{"name":"Daily-Summary-Fds","slug":"Daily-Summary-Fds","permalink":"http://jinwoopark94.github.io/tags/Daily-Summary-Fds/"}]}]}